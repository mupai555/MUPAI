import streamlit as st
import pandas as pd
import numpy as np
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.header import Header
from datetime import datetime
import base64
from collections import Counter
# Temporarily comment out if the module doesn't exist yet
# from cuestionario_fbeo import mostrar_cuestionario_fbeo

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="MUPAI - Entrenamiento Digital Basado en Ciencia",
    page_icon="üí™",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado mejorado
st.markdown("""
<style>  
    .main-header {  
        background: linear-gradient(135deg, #FFCC00 0%, #FFD700 50%, #FFA500 100%);  
        padding: 2rem;  
        border-radius: 15px;  
        text-align: center;  
        margin-bottom: 2rem;  
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);  
    }  
      
    .main-header h1 {  
        color: #000;  
        font-size: 3rem;  
        font-weight: bold;  
        margin: 0;  
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);  
    }  
      
    .main-header p {  
        color: #000;  
        font-size: 1.3rem;  
        margin: 0.5rem 0 0 0;  
        font-weight: 500;  
    }  
      
    .section-header {  
        background: linear-gradient(90deg, #000 0%, #333 100%);  
        color: #FFCC00;  
        padding: 1rem;  
        border-radius: 10px;  
        margin: 1.5rem 0;  
        text-align: center;  
        font-weight: bold;  
        box-shadow: 0 3px 10px rgba(0,0,0,0.2);  
    }  
      
    .questionnaire-container {  
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);  
        padding: 1.5rem;  
        border-radius: 12px;  
        border-left: 5px solid #FFCC00;  
        margin: 1rem 0;  
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);  
    }  
      
    .results-container {  
        background: linear-gradient(135deg, #FFCC00 0%, #FFE066 50%, #FFF2A6 100%);  
        padding: 2rem;  
        border-radius: 15px;  
        color: #000;  
        margin: 1rem 0;  
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);  
    }  
      
    .metric-card {  
        background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);  
        padding: 1.5rem;  
        border-radius: 12px;  
        box-shadow: 0 3px 12px rgba(0,0,0,0.1);  
        border-left: 6px solid #FFCC00;  
        margin: 1rem 0;  
        transition: transform 0.2s ease;  
    }  
      
    .metric-card:hover {  
        transform: translateY(-2px);  
        box-shadow: 0 5px 20px rgba(0,0,0,0.15);  
    }  
      
    .corporate-section {  
        background: linear-gradient(135deg, #f1f3f4 0%, #ffffff 100%);  
        padding: 2rem;  
        border-radius: 15px;  
        margin: 1.5rem 0;  
        border: 2px solid #FFCC00;  
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);  
    }  
      
    .corporate-section h3 {  
        color: #000;  
        border-bottom: 3px solid #FFCC00;  
        padding-bottom: 0.5rem;  
        margin-bottom: 1rem;  
    }  
      
    .logo-container {  
        text-align: center;  
        padding: 2rem;  
        background: linear-gradient(135deg, #FFCC00 0%, #FFD700 100%);  
        border-radius: 15px;  
        margin-bottom: 2rem;  
    }  
      
    .professional-profile {  
        background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);  
        padding: 2rem;  
        border-radius: 15px;  
        border-left: 6px solid #FFCC00;  
        margin: 1rem 0;  
    }  
      
    .achievement-badge {  
        background: linear-gradient(135deg, #FFCC00 0%, #FFD700 100%);  
        color: #000;  
        padding: 0.5rem 1rem;  
        border-radius: 20px;  
        display: inline-block;  
        margin: 0.2rem;  
        font-weight: bold;  
        font-size: 0.9rem;  
    }  
</style>  
""", unsafe_allow_html=True)

# Funciones de c√°lculo
def calcular_tmb_katch_mcardle(peso, grasa_corporal):
    """Calcula TMB usando f√≥rmula Katch-McArdle"""
    masa_magra = peso * (1 - grasa_corporal / 100)
    tmb = 370 + (21.6 * masa_magra)
    return tmb

def calcular_geaf(sexo, nivel_actividad):
    """Calcula GEAF seg√∫n nivel de actividad y sexo"""
    geaf_valores = {
        "Sedentario": 1.00,
        "Ligera": 1.11 if sexo == "Hombre" else 1.12,
        "Activo": 1.25 if sexo == "Hombre" else 1.27,
        "Muy activo": 1.48 if sexo == "Hombre" else 1.45
    }
    return geaf_valores.get(nivel_actividad, 1.00)

def calcular_gee(peso, dias_entrenamiento):
    """Calcula Gasto Energ√©tico por Ejercicio"""
    return 0.1 * peso * 60 * dias_entrenamiento

def evaluar_calidad_sueno(horas, tiempo_dormir, despertares, descansado):
    """Eval√∫a calidad del sue√±o y retorna penalizaci√≥n"""
    puntos = 0
    
    # Extract numeric value from sleep hours string
    if "<5h" in horas:
        puntos += 1
    elif "5-6h" in horas:
        puntos += 0.5
    elif ">9h" in horas:
        puntos += 1
    
    # Extract numeric value from sleep time string
    if "M√°s de 60 min" in tiempo_dormir:
        puntos += 1
    elif "45-60 min" in tiempo_dormir:
        puntos += 0.5
    
    # Extract numeric value from awakenings string
    if "M√°s de 3 veces" in despertares:
        puntos += 1
    elif "3 veces" in despertares:
        puntos += 0.5
    
    # Extract numeric value from quality string
    if "Muy mala" in descansado or "Mala" in descansado:
        puntos += 1
    elif "Regular" in descansado:
        puntos += 0.5
    
    if puntos <= 1:
        return 0
    elif puntos <= 2:
        return 0.05
    else:
        return 0.10

def evaluar_estres(respuestas_estres):
    """Eval√∫a nivel de estr√©s y retorna penalizaci√≥n"""
    total = sum(respuestas_estres)
    
    if total <= 5:
        return 0
    elif total <= 10:
        return 0.05
    else:
        return 0.10

# ==================== NUEVAS FUNCIONES PARA CUESTIONARIO AVANZADO ====================

def ajustar_grasa_corporal(porcentaje_grasa, metodo_medicion, sexo, numero_pliegues=None):
    """
    Ajusta autom√°ticamente el porcentaje de grasa corporal seg√∫n el m√©todo de medici√≥n
    """
    if metodo_medicion == "DEXA":
        return porcentaje_grasa  # DEXA es la referencia, no necesita ajuste
    
    elif metodo_medicion == "BIA":
        # Ajustes para BIA seg√∫n rangos
        if sexo == "Masculino":
            if porcentaje_grasa < 15:
                return porcentaje_grasa + 2.5
            elif porcentaje_grasa < 25:
                return porcentaje_grasa + 1.8
            else:
                return porcentaje_grasa + 1.2
        else:  # Femenino
            if porcentaje_grasa < 20:
                return porcentaje_grasa + 3.0
            elif porcentaje_grasa < 30:
                return porcentaje_grasa + 2.2
            else:
                return porcentaje_grasa + 1.5
    
    elif metodo_medicion == "F√≥rmula Naval":
        # Ajustes para F√≥rmula Naval
        if sexo == "Masculino":
            if porcentaje_grasa < 15:
                return porcentaje_grasa + 1.5
            elif porcentaje_grasa < 25:
                return porcentaje_grasa + 1.0
            else:
                return porcentaje_grasa + 0.5
        else:  # Femenino
            if porcentaje_grasa < 20:
                return porcentaje_grasa + 2.0
            elif porcentaje_grasa < 30:
                return porcentaje_grasa + 1.5
            else:
                return porcentaje_grasa + 1.0
    
    elif metodo_medicion == "Antropometr√≠a":
        # Ajustes seg√∫n n√∫mero de pliegues
        if numero_pliegues == 3:
            return porcentaje_grasa + 2.0
        elif numero_pliegues == 4:
            return porcentaje_grasa + 1.5
        elif numero_pliegues == 7:
            return porcentaje_grasa + 1.0
        else:
            return porcentaje_grasa + 1.8  # Valor por defecto
    
    return porcentaje_grasa

def calcular_ffmi(peso, estatura, porcentaje_grasa):
    """
    Calcula el Fat-Free Mass Index (FFMI)
    """
    masa_magra = peso * (1 - porcentaje_grasa / 100)
    ffmi = masa_magra / (estatura ** 2)
    return ffmi

def calcular_factor_actividad(nivel_actividad, sexo):
    """
    Calcula el factor de actividad espec√≠fico por g√©nero
    """
    factores = {
        "Sedentario": {"Masculino": 1.40, "Femenino": 1.35},
        "Ligeramente activo": {"Masculino": 1.55, "Femenino": 1.50},
        "Moderadamente activo": {"Masculino": 1.70, "Femenino": 1.65},
        "Muy activo": {"Masculino": 1.85, "Femenino": 1.80},
        "Extremadamente activo": {"Masculino": 2.00, "Femenino": 1.95}
    }
    
    return factores.get(nivel_actividad, {}).get(sexo, 1.40)

def evaluar_pittsburgh(horas_sueno, tiempo_dormir, despertares, calidad_percibida):
    """
    Eval√∫a la calidad del sue√±o usando escala Pittsburgh abreviada (0-16)
    """
    # Mapeo de respuestas a puntuaciones
    horas_map = {
        "M√°s de 9h": 0, "8-9h": 1, "7-8h": 2, "6-7h": 3, "5-6h": 4, "Menos de 5h": 5
    }
    
    tiempo_map = {
        "Menos de 15 min": 0, "15-30 min": 1, "30-45 min": 2, "45-60 min": 3, "M√°s de 60 min": 4
    }
    
    despertares_map = {
        "Nunca": 0, "1 vez": 1, "2 veces": 2, "3 veces": 3, "M√°s de 3 veces": 4
    }
    
    calidad_map = {
        "Excelente": 0, "Buena": 1, "Regular": 2, "Mala": 3, "Muy mala": 4
    }
    
    puntuacion = (horas_map.get(horas_sueno, 3) + 
                  tiempo_map.get(tiempo_dormir, 2) + 
                  despertares_map.get(despertares, 1) + 
                  calidad_map.get(calidad_percibida, 2))
    
    return puntuacion

def evaluar_pss4(respuesta1, respuesta2, respuesta3, respuesta4):
    """
    Eval√∫a estr√©s usando PSS-4 con √≠tems invertidos 2 y 3
    """
    # Mapeo de respuestas a puntuaciones
    normal_map = {
        "Nunca": 0, "Casi nunca": 1, "A veces": 2, "Frecuentemente": 3, "Muy frecuentemente": 4
    }
    
    # √çtems invertidos (2 y 3)
    invertido_map = {
        "Nunca": 4, "Casi nunca": 3, "A veces": 2, "Frecuentemente": 1, "Muy frecuentemente": 0
    }
    
    puntuacion = (normal_map.get(respuesta1, 2) + 
                  invertido_map.get(respuesta2, 2) + 
                  invertido_map.get(respuesta3, 2) + 
                  normal_map.get(respuesta4, 2))
    
    return puntuacion

def calcular_fri(puntuacion_sueno, puntuacion_estres):
    """
    Calcula el Factor de Recuperaci√≥n Inteligente (FRI)
    """
    puntuacion_total = puntuacion_sueno + puntuacion_estres
    
    if puntuacion_total <= 6:
        return {"nivel": "Excelente", "factor": 1.0, "descripcion": "Recuperaci√≥n √≥ptima"}
    elif puntuacion_total <= 12:
        return {"nivel": "Bueno", "factor": 0.95, "descripcion": "Recuperaci√≥n adecuada"}
    elif puntuacion_total <= 18:
        return {"nivel": "Regular", "factor": 0.90, "descripcion": "Recuperaci√≥n comprometida"}
    elif puntuacion_total <= 24:
        return {"nivel": "Deficiente", "factor": 0.85, "descripcion": "Recuperaci√≥n muy comprometida"}
    else:
        return {"nivel": "Cr√≠tico", "factor": 0.80, "descripcion": "Recuperaci√≥n cr√≠tica"}

def determinar_objetivo_automatico(porcentaje_grasa, sexo, nivel_entrenamiento):
    """
    Determina autom√°ticamente el objetivo seg√∫n tabla de criterios
    """
    if sexo == "Masculino":
        if porcentaje_grasa > 25:
            return {"objetivo": "Definici√≥n", "deficit": 0.125, "descripcion": "P√©rdida de grasa prioritaria"}
        elif 18 <= porcentaje_grasa <= 25:
            return {"objetivo": "Definici√≥n", "deficit": 0.075, "descripcion": "P√©rdida de grasa moderada"}
        elif 12 <= porcentaje_grasa < 18:
            return {"objetivo": "Recomposici√≥n", "deficit": 0.025, "descripcion": "Recomposici√≥n corporal"}
        else:  # < 12%
            return {"objetivo": "Volumen", "surplus": 0.125, "descripcion": "Ganancia muscular"}
    else:  # Femenino
        if porcentaje_grasa > 32:
            return {"objetivo": "Definici√≥n", "deficit": 0.125, "descripcion": "P√©rdida de grasa prioritaria"}
        elif 25 <= porcentaje_grasa <= 32:
            return {"objetivo": "Definici√≥n", "deficit": 0.075, "descripcion": "P√©rdida de grasa moderada"}
        elif 20 <= porcentaje_grasa < 25:
            return {"objetivo": "Recomposici√≥n", "deficit": 0.025, "descripcion": "Recomposici√≥n corporal"}
        else:  # < 20%
            return {"objetivo": "Volumen", "surplus": 0.125, "descripcion": "Ganancia muscular"}

def calcular_macronutrientes_avanzados(calorias_totales, peso, objetivo, sexo):
    """
    Calcula macronutrientes con distribuci√≥n inteligente seg√∫n objetivo
    """
    # Prote√≠na ajustada por objetivo
    if objetivo == "Definici√≥n":
        factor_proteina = 2.6
    elif objetivo == "Recomposici√≥n":
        factor_proteina = 2.2
    else:  # Volumen
        factor_proteina = 1.8
    
    proteina_g = peso * factor_proteina
    proteina_kcal = proteina_g * 4
    
    # Grasa ajustada por objetivo
    if objetivo == "Definici√≥n":
        factor_grasa = 0.8
    elif objetivo == "Recomposici√≥n":
        factor_grasa = 1.0
    else:  # Volumen
        factor_grasa = 1.2
    
    grasa_g = peso * factor_grasa
    grasa_kcal = grasa_g * 9
    
    # Carbohidratos por diferencia
    carbs_kcal = calorias_totales - proteina_kcal - grasa_kcal
    carbs_g = carbs_kcal / 4
    
    return {
        "proteina_g": proteina_g,
        "proteina_kcal": proteina_kcal,
        "grasa_g": grasa_g,
        "grasa_kcal": grasa_kcal,
        "carbs_g": carbs_g,
        "carbs_kcal": carbs_kcal
    }

def generar_reporte_completo(datos_usuario, calculos, fri, objetivo, macronutrientes):
    """
    Genera reporte completo detallado para el coach
    """
    reporte = f"""
========================================
üìä NUEVO CLIENTE - EVALUACI√ìN AVANZADA
========================================

üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M')}
üë§ Cliente: {datos_usuario.get('nombre', 'N/A')}
üìß Email: {datos_usuario.get('email', 'N/A')}

========================================
üÜî DATOS PERSONALES
========================================
Edad: {datos_usuario.get('edad', 'N/A')} a√±os
Sexo: {datos_usuario.get('sexo', 'N/A')}

========================================
üßç‚Äç‚ôÇÔ∏è COMPOSICI√ìN CORPORAL
========================================
Peso: {datos_usuario.get('peso', 'N/A')} kg
Estatura: {datos_usuario.get('estatura', 'N/A')} cm
IMC: {calculos.get('imc', 'N/A'):.1f}
M√©todo BF: {datos_usuario.get('metodo_bf', 'N/A')}
BF original: {datos_usuario.get('bf_original', 'N/A')}%
BF ajustado: {datos_usuario.get('bf_ajustado', 'N/A')}%
Masa magra: {calculos.get('masa_magra', 'N/A'):.1f} kg
FFMI: {calculos.get('ffmi', 'N/A'):.1f}

========================================
üèÉ‚Äç‚ôÇÔ∏è ACTIVIDAD F√çSICA
========================================
Nivel: {datos_usuario.get('nivel_actividad', 'N/A')}
Ocupaci√≥n: {datos_usuario.get('ocupacion', 'N/A')}
Entrenamiento: {datos_usuario.get('minutos_entrenamiento', 'N/A')} min x {datos_usuario.get('dias_entrenamiento', 'N/A')} d√≠as
Pasos diarios: {datos_usuario.get('pasos_diarios', 'N/A')}

========================================
‚ö° C√ÅLCULOS ENERG√âTICOS
========================================
GER: {calculos.get('ger', 'N/A'):.0f} kcal
GEAF: {calculos.get('geaf', 'N/A'):.2f}
GEE: {calculos.get('gee', 'N/A'):.0f} kcal
GET: {calculos.get('get', 'N/A'):.0f} kcal

========================================
üí§ EVALUACI√ìN DE SUE√ëO
========================================
Puntuaci√≥n Pittsburgh: {calculos.get('puntuacion_sueno', 'N/A')}/16
Clasificaci√≥n: {calculos.get('clasificacion_sueno', 'N/A')}

========================================
üòñ EVALUACI√ìN DE ESTR√âS
========================================
Puntuaci√≥n PSS-4: {calculos.get('puntuacion_estres', 'N/A')}/16
Clasificaci√≥n: {calculos.get('clasificacion_estres', 'N/A')}

========================================
üß† FACTOR DE RECUPERACI√ìN INTELIGENTE
========================================
Nivel FRI: {fri.get('nivel', 'N/A')}
Factor: {fri.get('factor', 'N/A')}
Descripci√≥n: {fri.get('descripcion', 'N/A')}

========================================
üéØ OBJETIVO AUTOM√ÅTICO
========================================
Objetivo: {objetivo.get('objetivo', 'N/A')}
Descripci√≥n: {objetivo.get('descripcion', 'N/A')}
Ajuste cal√≥rico: {objetivo.get('deficit', objetivo.get('surplus', 0)):.1%}

========================================
üçΩÔ∏è MACRONUTRIENTES AVANZADOS
========================================
Calor√≠as totales: {calculos.get('calorias_finales', 'N/A'):.0f} kcal

Prote√≠na: {macronutrientes.get('proteina_g', 'N/A'):.0f}g ({macronutrientes.get('proteina_kcal', 'N/A'):.0f} kcal)
Grasas: {macronutrientes.get('grasa_g', 'N/A'):.0f}g ({macronutrientes.get('grasa_kcal', 'N/A'):.0f} kcal)
Carbohidratos: {macronutrientes.get('carbs_g', 'N/A'):.0f}g ({macronutrientes.get('carbs_kcal', 'N/A'):.0f} kcal)

========================================
üìù NOTAS PARA EL COACH
========================================
Prioridad: {calculos.get('prioridad', 'Est√°ndar')}
Seguimiento: {calculos.get('seguimiento', 'Rutinario')}
Contactar en: 24-48 horas

========================================
"""
    
    return reporte

def enviar_email_resultados(destinatario, asunto, contenido):
    """Nueva funci√≥n - Sin emails, solo acceso de coach"""
    import json
    from datetime import datetime
    
    # Tu contrase√±a de coach
    CONTRASE√ëA_COACH = "MuPai2025"
    
    try:
        # Mensaje para el cliente
        st.success("‚úÖ Gracias! Tu cuestionario ha sido procesado correctamente.")
        st.info("üéØ Tu coach revisar√° los resultados y te contactar√° pronto.")
        
        # √Årea del coach
        st.markdown("---")
        st.header("üîê √Årea Exclusiva del Coach")
        
        contrase√±a = st.text_input("üîë Contrase√±a de Coach:", type="password")
        
        if contrase√±a == CONTRASE√ëA_COACH:
            st.success("‚úÖ Coach mupai555 verificado")
            
            # Mostrar resultados completos
            st.header("üìä An√°lisis Completo del Cliente")
            st.text_area("Resultados:", contenido, height=400)
            
            # Datos para descarga
            datos_completos = {
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "coach": "mupai555",
                "destinatario": destinatario,
                "asunto": asunto,
                "contenido": contenido
            }
            
            # Bot√≥n de descarga
            st.download_button(
                label="üì• Descargar An√°lisis Completo",
                data=json.dumps(datos_completos, ensure_ascii=False, indent=2),
                file_name=f"analisis_cliente_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
            
        elif contrase√±a:
            st.error("‚ùå Acceso denegado. Solo el coach autorizado puede ver los resultados.")
        
        return True
        
    except Exception as e:
        st.error(f"Error al procesar: {str(e)}")
        return False
        
# Inicializar session state
if 'page' not in st.session_state:
    st.session_state.page = "inicio"

# Sidebar con navegaci√≥n mejorada
with st.sidebar:
    st.markdown("""
    <div class="logo-container">
        <h1 style='color: #000; margin: 0; font-size: 2.5rem;'>üí™ MUPAI</h1>
        <p style='color: #000; font-size: 1rem; margin: 0.5rem 0 0 0;'>Entrenamiento Digital</p>
        <p style='color: #000; font-size: 0.9rem; margin: 0;'>Basado en Ciencia</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Navegaci√≥n principal
    if st.button("üè† Inicio", use_container_width=True):
        st.session_state.page = "inicio"
    
    st.markdown("### üìã Cuestionarios Especializados")
    
    if st.button("‚ö° Balance Energ√©tico √ìptimo", use_container_width=True):
        st.session_state.page = "balance_energetico"
    
    if st.button("üçΩÔ∏è Patrones y Preferencias Alimenticias", use_container_width=True):
        st.session_state.page = "preferencias_alimentarias"
    
    if st.button("üßÅ Antojos Alimentarios", use_container_width=True):
        st.session_state.page = "antojos_alimentarios"
    
    if st.button("üìä Cuestionario FBEO", use_container_width=True):
        st.session_state.page = "cuestionario_fbeo"
    
    st.markdown("---")
    
    if st.button("üë®‚Äçüéì Acerca del Profesional", use_container_width=True):
        st.session_state.page = "about"
    
    if st.button("üìû Contacto", use_container_width=True):
        st.session_state.page = "contacto"

# ==================== P√ÅGINA DE INICIO ====================
if st.session_state.page == "inicio":
    # P√°gina de inicio con misi√≥n, visi√≥n y pol√≠ticas
    st.markdown("""
    <div class="main-header">
        <h1>üí™ MUPAI</h1>
        <p>Plataforma Digital Profesional para Entrenamiento Basado en Ciencia</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Secci√≥n de Misi√≥n, Visi√≥n y Pol√≠ticas
    tab1, tab2, tab3, tab4 = st.tabs(["üéØ Misi√≥n", "üîÆ Visi√≥n", "üìã Pol√≠tica", "üìò Pol√≠tica del Servicio"])
    
    with tab1:
        st.markdown("""
        <div class="corporate-section">
            <h3>üéØ Nuestra Misi√≥n</h3>
            <p style="font-size: 1.1rem; line-height: 1.6;">
                Hacer accesible el <strong>entrenamiento basado en ciencia</strong>, proporcionando planes completamente personalizados 
                a trav√©s de herramientas digitales respaldadas por <strong>inteligencia artificial</strong>, datos precisos y la 
                investigaci√≥n m√°s actualizada en ciencias del ejercicio.
            </p>
            <p style="font-size: 1.1rem; line-height: 1.6;">
                Nos enfocamos en promover el <strong>desarrollo integral</strong> de nuestros usuarios y su bienestar f√≠sico y mental.
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with tab2:
        st.markdown("""
        <div class="corporate-section">
            <h3>üîÆ Nuestra Visi√≥n</h3>
            <p style="font-size: 1.1rem; line-height: 1.6;">
                Convertirnos en uno de los <strong>m√°ximos referentes a nivel global</strong> en entrenamiento digital personalizado, 
                aprovechando las nuevas tecnolog√≠as para hacer m√°s accesible el fitness basado en ciencia.
            </p>
            <p style="font-size: 1.1rem; line-height: 1.6;">
                Aspiramos a <strong>transformar la experiencia del entrenamiento f√≠sico</strong>, integrando inteligencia artificial, 
                investigaci√≥n cient√≠fica y herramientas digitales avanzadas que permitan a cualquier persona alcanzar su m√°ximo potencial.
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with tab3:
        st.markdown("""
        <div class="corporate-section">
            <h3>üìã Nuestra Pol√≠tica</h3>
            <p style="font-size: 1.1rem; line-height: 1.6;">
                En MUPAI, nuestra pol√≠tica est√° fundamentada en el <strong>compromiso con la excelencia</strong>, la √©tica y 
                el servicio centrado en el usuario.
            </p>
            <p style="font-size: 1.1rem; line-height: 1.6;">
                Actuamos con <strong>responsabilidad y transparencia</strong> para ofrecer soluciones tecnol√≥gicas que integren 
                ciencia, personalizaci√≥n y accesibilidad, contribuyendo al bienestar integral de quienes conf√≠an en nosotros.
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    with tab4:
        st.markdown("""
        <div class="corporate-section">
            <h3>üìò Pol√≠tica del Servicio</h3>
            <p style="font-size: 1.1rem; line-height: 1.6; margin-bottom: 1rem;">
                En MUPAI, guiamos nuestras acciones por los siguientes principios:
            </p>
            <ul style="font-size: 1rem; line-height: 1.8;">
                <li><strong>üî¨ Dise√±amos entrenamientos digitales</strong> que combinan personalizaci√≥n, datos confiables y ciencia del ejercicio.</li>
                <li><strong>üíª Aprovechamos la tecnolog√≠a</strong> para ofrecer un servicio accesible y adaptable a las necesidades de cada usuario.</li>
                <li><strong>üîí Respetamos y protegemos la privacidad</strong> de los datos personales, garantizando su uso responsable.</li>
                <li><strong>üöÄ Innovamos de forma continua</strong> para mejorar la experiencia y los resultados de nuestros usuarios.</li>
                <li><strong>ü§ù Promovemos valores</strong> como el esfuerzo, la constancia y el respeto en cada interacci√≥n, fomentando un ambiente de crecimiento y bienestar.</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # Resto de la p√°gina de inicio con servicios, etc.
    st.markdown("""
    <div class="section-header">
        <h2>üöÄ Nuestros Servicios Especializados</h2>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h3>‚ö° Balance Energ√©tico √ìptimo</h3>
            <p>C√°lculo personalizado de tu ingesta cal√≥rica ideal usando f√≥rmulas cient√≠ficas avanzadas como Katch-McArdle, evaluando tu composici√≥n corporal, nivel de actividad, calidad del sue√±o y estr√©s.</p>
            <ul style="font-size: 0.9rem;">
                <li>üìä TMB personalizada</li>
                <li>üèÉ Gasto energ√©tico por ejercicio</li>
                <li>üò¥ Evaluaci√≥n del sue√±o</li>
                <li>üß† An√°lisis de estr√©s</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h3>üçΩÔ∏è Preferencias Alimentarias</h3>
            <p>An√°lisis detallado de tus gustos alimentarios con m√°s de 150 opciones organizadas en 8 categor√≠as nutricionales para crear tu perfil alimentario personalizado.</p>
            <ul style="font-size: 0.9rem;">
                <li>ü•© Prote√≠nas especializadas</li>
                <li>üçå Frutas y vegetales</li>
                <li>üßÄ L√°cteos variados</li>
                <li>üïí Patrones alimentarios</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h3>üßÅ Antojos Alimentarios</h3>
            <p>Evaluaci√≥n especializada para poblaci√≥n mexicana que analiza 10 categor√≠as de antojos con contexto cultural, identificando patrones emocionales y estrategias de control.</p>
            <ul style="font-size: 0.9rem;">
                <li>üá≤üáΩ Adaptado a M√©xico</li>
                <li>üé≠ An√°lisis emocional</li>
                <li>üìä Patrones de comportamiento</li>
                <li>üí° Estrategias personalizadas</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

# ==================== CUESTIONARIO BALANCE ENERG√âTICO ====================
elif st.session_state.page == "balance_energetico":
    st.markdown("""
    <div class="section-header">
        <h2>üßÆ Cuestionario Cient√≠fico Avanzado - Balance Energ√©tico √ìptimo</h2>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="questionnaire-container">
        <h3>üéØ Objetivo</h3>
        <p>Evaluaci√≥n cient√≠ficamente fundamentada que integra <strong>composici√≥n corporal, actividad f√≠sica, 
        calidad del sue√±o, estr√©s percibido y factor de recuperaci√≥n inteligente</strong> para determinar 
        autom√°ticamente tu objetivo nutricional y plan de macronutrientes personalizado.</p>
    </div>
    """, unsafe_allow_html=True)
    
    with st.form("balance_energetico_avanzado"):
        # =================  DATOS PERSONALES INICIALES =================
        st.subheader("üÜî Datos Personales Iniciales")
        col1, col2 = st.columns(2)
        
        with col1:
            nombre_completo = st.text_input("Nombre completo*", placeholder="Tu nombre completo")
            email_destinatario = st.text_input("Correo electr√≥nico*", placeholder="tu@email.com")
            edad = st.number_input("Edad*", min_value=16, max_value=80, value=25)
            
        with col2:
            sexo = st.selectbox("Sexo*", ["Masculino", "Femenino"])
            st.markdown("")
            st.markdown("")
            condiciones_aceptadas = st.checkbox("Acepto los t√©rminos y condiciones y autorizo el procesamiento de mis datos*")
        
        # =================  SECCI√ìN 1: COMPOSICI√ìN CORPORAL =================
        st.subheader("üßç‚Äç‚ôÇÔ∏è Secci√≥n 1: Composici√≥n Corporal")
        col1, col2 = st.columns(2)
        
        with col1:
            estatura = st.number_input("Estatura (cm)*", min_value=140, max_value=220, value=170)
            peso = st.number_input("Peso (kg)*", min_value=40.0, max_value=200.0, value=70.0, step=0.1)
            metodo_bf = st.selectbox("M√©todo de medici√≥n de grasa corporal*", [
                "DEXA", "BIA", "F√≥rmula Naval", "Antropometr√≠a"
            ])
            
        with col2:
            grasa_corporal_original = st.number_input("Porcentaje de grasa corporal (%)*", 
                                                     min_value=5.0, max_value=50.0, value=20.0, step=0.1)
            
            if metodo_bf == "Antropometr√≠a":
                numero_pliegues = st.selectbox("N√∫mero de pliegues", [3, 4, 7])
            else:
                numero_pliegues = None
            
            # Aplicar correcci√≥n autom√°tica
            grasa_corporal_ajustada = ajustar_grasa_corporal(
                grasa_corporal_original, metodo_bf, sexo, numero_pliegues
            )
            
            if grasa_corporal_ajustada != grasa_corporal_original:
                st.info(f"üí° **Ajuste autom√°tico aplicado:** {grasa_corporal_original}% ‚Üí {grasa_corporal_ajustada:.1f}%")
                st.caption(f"Correcci√≥n por m√©todo {metodo_bf}")
            
            # C√°lculos autom√°ticos
            masa_magra = peso * (1 - grasa_corporal_ajustada/100)
            ffmi = calcular_ffmi(peso, estatura/100, grasa_corporal_ajustada)
            
            st.metric("Masa Magra", f"{masa_magra:.1f} kg")
            st.metric("FFMI", f"{ffmi:.1f}")
        
        # =================  SECCI√ìN 2: ACTIVIDAD F√çSICA Y GET =================
        st.subheader("üèÉ‚Äç‚ôÇÔ∏è Secci√≥n 2: Nivel de Actividad y GET")
        col1, col2 = st.columns(2)
        
        with col1:
            nivel_actividad = st.selectbox("Nivel de actividad diaria*", [
                "Sedentario", "Ligeramente activo", "Moderadamente activo", 
                "Muy activo", "Extremadamente activo"
            ])
            
            ocupacion = st.selectbox("Ocupaci√≥n/Trabajo*", [
                "Oficina/Escritorio", "Trabajo de pie", "Trabajo activo", 
                "Trabajo f√≠sico pesado", "Estudiante", "Jubilado/Pensionado"
            ])
            
            minutos_entrenamiento = st.number_input("Minutos de entrenamiento por sesi√≥n*", 
                                                   min_value=0, max_value=180, value=60)
            
        with col2:
            dias_entrenamiento = st.number_input("D√≠as de entrenamiento por semana*", 
                                               min_value=0, max_value=7, value=4)
            
            pasos_diarios = st.selectbox("Pasos diarios promedio*", [
                "< 5,000", "5,000-7,500", "7,500-10,000", "10,000-12,500", "> 12,500"
            ])
            
            # C√°lculos autom√°ticos
            geaf = calcular_factor_actividad(nivel_actividad, sexo)
            
            # GER usando Katch-McArdle
            tmb = 370 + (21.6 * masa_magra)
            ger = tmb * 1.15  # ETA fijo personalizado por coach
            
            # GEE por entrenamiento
            gee_por_sesion = masa_magra * (minutos_entrenamiento / 60) * 7
            gee_semanal = gee_por_sesion * dias_entrenamiento
            
            # GET final
            get_total = (ger * geaf) + (gee_semanal / 7)
            
            st.metric("GER", f"{ger:.0f} kcal")
            st.metric("GET", f"{get_total:.0f} kcal")
        
        # =================  SECCI√ìN 3: CALIDAD DEL SUE√ëO =================
        st.subheader("üí§ Secci√≥n 3: Calidad del Sue√±o (Pittsburgh abreviado)")
        col1, col2 = st.columns(2)
        
        with col1:
            horas_sueno = st.selectbox("¬øCu√°ntas horas duermes por noche?*", [
                "M√°s de 9h", "8-9h", "7-8h", "6-7h", "5-6h", "Menos de 5h"
            ])
            
            tiempo_dormir = st.selectbox("¬øCu√°nto tardas en quedarte dormido?*", [
                "Menos de 15 min", "15-30 min", "30-45 min", "45-60 min", "M√°s de 60 min"
            ])
            
        with col2:
            despertares_nocturnos = st.selectbox("¬øCu√°ntas veces te despiertas por noche?*", [
                "Nunca", "1 vez", "2 veces", "3 veces", "M√°s de 3 veces"
            ])
            
            calidad_percibida = st.selectbox("¬øC√≥mo percibes la calidad de tu sue√±o?*", [
                "Excelente", "Buena", "Regular", "Mala", "Muy mala"
            ])
        
        # Calcular puntuaci√≥n Pittsburgh
        puntuacion_sueno = evaluar_pittsburgh(horas_sueno, tiempo_dormir, despertares_nocturnos, calidad_percibida)
        
        if puntuacion_sueno >= 10:
            st.warning(f"‚ö†Ô∏è **Puntuaci√≥n sue√±o: {puntuacion_sueno}/16** - Calidad deficiente detectada")
        else:
            st.success(f"‚úÖ **Puntuaci√≥n sue√±o: {puntuacion_sueno}/16** - Calidad adecuada")
        
        # =================  SECCI√ìN 4: ESTR√âS PERCIBIDO =================
        st.subheader("üòñ Secci√≥n 4: Estr√©s Percibido (PSS-4)")
        st.markdown("**En el √∫ltimo mes, ¬øcon qu√© frecuencia...**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            pss1 = st.selectbox("¬øHas sentido que no pod√≠as controlar las cosas importantes de tu vida?*", [
                "Nunca", "Casi nunca", "A veces", "Frecuentemente", "Muy frecuentemente"
            ])
            
            pss2 = st.selectbox("¬øTe has sentido confiado/a sobre tu capacidad para manejar tus problemas personales?*", [
                "Nunca", "Casi nunca", "A veces", "Frecuentemente", "Muy frecuentemente"
            ])
            
        with col2:
            pss3 = st.selectbox("¬øHas sentido que las cosas van como t√∫ quieres?*", [
                "Nunca", "Casi nunca", "A veces", "Frecuentemente", "Muy frecuentemente"
            ])
            
            pss4 = st.selectbox("¬øHas sentido que las dificultades se acumulan tanto que no puedes superarlas?*", [
                "Nunca", "Casi nunca", "A veces", "Frecuentemente", "Muy frecuentemente"
            ])
        
        # Calcular puntuaci√≥n PSS-4
        puntuacion_estres = evaluar_pss4(pss1, pss2, pss3, pss4)
        
        if puntuacion_estres >= 10:
            st.warning(f"‚ö†Ô∏è **Puntuaci√≥n estr√©s: {puntuacion_estres}/16** - Nivel alto detectado")
        else:
            st.success(f"‚úÖ **Puntuaci√≥n estr√©s: {puntuacion_estres}/16** - Nivel manejable")
        
        # =================  EVALUACI√ìN FRI =================
        fri = calcular_fri(puntuacion_sueno, puntuacion_estres)
        
        st.subheader("üß† Factor de Recuperaci√≥n Inteligente (FRI)")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Nivel FRI", fri["nivel"])
        with col2:
            st.metric("Factor", f"{fri['factor']:.2f}")
        with col3:
            st.metric("Descripci√≥n", fri["descripcion"])
        
        # Penalizaci√≥n energ√©tica si es necesario
        if puntuacion_sueno >= 10:
            get_total *= 0.95  # Penalizaci√≥n por sue√±o deficiente
            st.info("üí° **Ajuste aplicado:** Penalizaci√≥n energ√©tica por sue√±o deficiente")
        
        submitted = st.form_submit_button("üöÄ Generar An√°lisis Completo", type="primary")
        
        if submitted:
            # Validaciones
            if not nombre_completo:
                st.error("‚ùå **Error:** El nombre completo es obligatorio")
                st.stop()
            
            if not email_destinatario:
                st.error("‚ùå **Error:** El correo electr√≥nico es obligatorio")
                st.stop()
            
            if not condiciones_aceptadas:
                st.error("‚ùå **Error:** Debes aceptar los t√©rminos y condiciones")
                st.stop()
            
            # =================  DETERMINACI√ìN AUTOM√ÅTICA DEL OBJETIVO =================
            objetivo = determinar_objetivo_automatico(grasa_corporal_ajustada, sexo, dias_entrenamiento)
            
            # Aplicar FRI y calcular calor√≠as finales
            if "deficit" in objetivo:
                calorias_finales = get_total * (1 - objetivo["deficit"]) * fri["factor"]
            elif "surplus" in objetivo:
                calorias_finales = get_total * (1 + objetivo["surplus"]) * fri["factor"]
            else:
                calorias_finales = get_total * fri["factor"]
            
            # =================  MACRONUTRIENTES AVANZADOS =================
            macronutrientes = calcular_macronutrientes_avanzados(
                calorias_finales, peso, objetivo["objetivo"], sexo
            )
            
            # =================  MOSTRAR RESULTADOS AL USUARIO =================
            st.success("‚úÖ **¬°An√°lisis completado exitosamente!**")
            
            st.info("""
            üìß **Tu evaluaci√≥n completa ha sido enviada a tu entrenador MUPAI.**
            
            **Pr√≥ximos pasos:**
            - Revisi√≥n detallada por parte del equipo t√©cnico
            - Plan nutricional personalizado
            - Seguimiento y ajustes continuos
            
            ‚è∞ **Tiempo de respuesta: 24-48 horas**
            """)
            
            # Resumen para el usuario
            st.markdown("### üìä Resumen de tu Evaluaci√≥n")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Composici√≥n Corporal", f"{grasa_corporal_ajustada:.1f}% GC")
            with col2:
                st.metric("FFMI", f"{ffmi:.1f}")
            with col3:
                st.metric("Nivel FRI", fri["nivel"])
            with col4:
                st.metric("Objetivo", objetivo["objetivo"])
            
            # =================  GENERAR REPORTE COMPLETO =================
            datos_usuario = {
                "nombre": nombre_completo,
                "email": email_destinatario,
                "edad": edad,
                "sexo": sexo,
                "peso": peso,
                "estatura": estatura,
                "metodo_bf": metodo_bf,
                "bf_original": grasa_corporal_original,
                "bf_ajustado": grasa_corporal_ajustada,
                "nivel_actividad": nivel_actividad,
                "ocupacion": ocupacion,
                "minutos_entrenamiento": minutos_entrenamiento,
                "dias_entrenamiento": dias_entrenamiento,
                "pasos_diarios": pasos_diarios
            }
            
            calculos = {
                "imc": peso / ((estatura/100) ** 2),
                "masa_magra": masa_magra,
                "ffmi": ffmi,
                "tmb": tmb,
                "ger": ger,
                "geaf": geaf,
                "gee": gee_semanal,
                "get": get_total,
                "calorias_finales": calorias_finales,
                "puntuacion_sueno": puntuacion_sueno,
                "puntuacion_estres": puntuacion_estres,
                "clasificacion_sueno": "Deficiente" if puntuacion_sueno >= 10 else "Adecuada",
                "clasificacion_estres": "Alto" if puntuacion_estres >= 10 else "Manejable",
                "prioridad": "Prioritario" if (puntuacion_sueno >= 10 or puntuacion_estres >= 10) else "Est√°ndar",
                "seguimiento": "Inmediato" if fri["nivel"] in ["Deficiente", "Cr√≠tico"] else "Rutinario"
            }
            
            # Generar reporte completo
            reporte_completo = generar_reporte_completo(datos_usuario, calculos, fri, objetivo, macronutrientes)
            
            # Enviar al coach
            try:
                trainer_email = st.secrets.get("trainer_email", "mupaitraining@outlook.com")
                enviar_email_resultados(trainer_email, 
                  f"EVALUACI√ìN AVANZADA - {nombre_completo}", 
                  reporte_completo)
                st.success("‚úÖ Reporte enviado correctamente al equipo t√©cnico")
            except Exception as e:
                st.error(f"‚ùå Error al enviar reporte: {str(e)}")
            
            # Mostrar pr√≥ximos pasos
            st.markdown("""
            ---
            ### üéØ Pr√≥ximos Pasos
            
            1. **Revisi√≥n t√©cnica** de tu evaluaci√≥n completa
            2. **Elaboraci√≥n** de tu plan nutricional personalizado
            3. **Contacto directo** para coordinar inicio del programa
            4. **Seguimiento continuo** y ajustes seg√∫n evoluci√≥n
            
            **¬øDudas urgentes?** Contacta a MUPAI Training.
            """)

# ==================== CUESTIONARIO PREFERENCIAS ALIMENTARIAS ====================
elif st.session_state.page == "preferencias_alimentarias":
    st.markdown("""
    <div class="section-header">
        <h2>üçΩÔ∏è Cuestionario: Patrones y Preferencias Alimenticias</h2>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="questionnaire-container">
        <h3>üìã Instrucciones</h3>
        <p><strong>Selecciona de cada lista los alimentos que prefieres o est√°s dispuesto(a) a consumir.</strong></p>
        <p>‚úÖ Marca todos los que apliquen</p>
        <p>üîÑ En caso de no tener problema con todos, marca "Todas las anteriores"</p>
        
        <h4>üéØ Objetivo</h4>
        <p>Este cuestionario nos permitir√° crear tu <strong>perfil nutricional personalizado</strong> basado en tus gustos 
        y preferencias reales, garantizando que disfrutes tu plan alimentario.</p>
    </div>
    """, unsafe_allow_html=True)
    
    with st.form("preferencias_alimentarias_form"):
        
        # --- PROTE√çNAS DE ORIGEN ANIMAL MAGRAS ---
        st.markdown("""
        <div class="questionnaire-container">
            <h3>ü•© Prote√≠nas de origen animal magras</h3>
        </div>
        """, unsafe_allow_html=True)
        
        proteinas_magras_opciones = [
            "Todas las anteriores",
            "Pechuga de pollo",
            "Claras de huevo", 
            "Lomo de cerdo",
            "Lomo de res",
            "Top sirloin",
            "Bacalao",
            "At√∫n en agua",
            "Tilapia",
            "Mojarra",
            "Carne molida magra (90/10 a 97/3)",
            "Filete de merluza",
            "Pargo", 
            "Pez espada",
            "Lenguado",
            "Conejo",
            "Codorniz",
            "Pechuga de pavo",
            "At√∫n fresco",
            "Surimi light",
            "Ostras"
        ]
        
        proteinas_magras = st.multiselect(
            "Selecciona las prote√≠nas magras que consumes o estar√≠as dispuesto(a) a consumir:",
            proteinas_magras_opciones,
            key="proteinas_magras"
        )
        
        # --- PROTE√çNAS DE ORIGEN ANIMAL CON M√ÅS GRASA ---
        st.markdown("""
        <div class="questionnaire-container">
            <h3>ü•ì Prote√≠nas de origen animal con m√°s grasa</h3>
        </div>
        """, unsafe_allow_html=True)
        
        proteinas_grasa_opciones = [
            "Todas las anteriores",
            "Huevo entero",
            "Costilla de cerdo",
            "Chuleta natural",
            "Chuleta ahumada", 
            "Muslo de pollo con piel",
            "Arrachera",
            "Rib-eye",
            "Salm√≥n",
            "Sardinas",
            "T-bone",
            "Carne molida regular (80/20 a 85/15)",
            "Diezmillo",
            "Steak del 7",
            "Falda",
            "Pica√±a",
            "Tocino",
            "Pierna de pato",
            "Chorizo artesanal",
            "Longaniza de cerdo",
            "At√∫n en aceite"
        ]
        
        proteinas_grasa = st.multiselect(
            "Selecciona las prote√≠nas con grasa que consumes o estar√≠as dispuesto(a) a consumir:",
            proteinas_grasa_opciones,
            key="proteinas_grasa"
        )
        
               # --- FRUTAS ---
        st.markdown("""
        <div class="questionnaire-container">
            <h3>üçå Frutas (elige tus favoritas o marca todas si no tienes restricciones)</h3>
        </div>
        """, unsafe_allow_html=True)
        
        frutas_opciones = [
            "Todas las anteriores",
            "Pl√°tano",
            "Manzana",
            "Pera",
            "Fresa",
            "Mango",
            "Papaya",
            "Sand√≠a",
            "Pi√±a",
            "Kiwi",
            "Moras (zarzamora, frambuesa, ar√°ndano)",
            "Uvas",
            "Granada",
            "Naranja",
            "Mandarina",
            "Guayaba",
            "Mel√≥n",
            "Higo",
            "Durazno",
            "Cereza",
            "Ciruela"
        ]
        
        frutas = st.multiselect(
            "Selecciona las frutas que prefieres:",
            frutas_opciones,
            key="frutas"
        )
        
        # --- VEGETALES ---
        st.markdown("""
        <div class="questionnaire-container">
            <h3>ü•¶ Vegetales (elige tus favoritos o marca todas si no tienes restricciones)</h3>
        </div>
        """, unsafe_allow_html=True)
        
        vegetales_opciones = [
            "Todas las anteriores",
            "Espinaca",
            "Br√≥coli",
            "Zanahoria",
            "Calabaza",
            "Pepino",
            "Lechuga",
            "Jitomate",
            "Betabel",
            "Champi√±ones",
            "Esp√°rragos",
            "Coliflor",
            "Acelga",
            "Ejotes",
            "Nopales",
            "Pimiento morr√≥n (rojo, verde, amarillo)",
            "Apio",
            "Cebolla morada",
            "Cebolla blanca",
            "R√°banos",
            "Col de Bruselas"
        ]
        
        vegetales = st.multiselect(
            "Selecciona los vegetales que prefieres:",
            vegetales_opciones,
            key="vegetales"
        )
        
        # --- CARBOHIDRATOS ALTOS EN ALMID√ìN ---
        st.markdown("""
        <div class="questionnaire-container">
            <h3>üç† Carbohidratos altos en almid√≥n</h3>
        </div>
        """, unsafe_allow_html=True)
        
        carbohidratos_opciones = [
            "Todas las anteriores",
            "Arroz blanco",
            "Arroz integral",
            "Papa blanca",
            "Papa roja",
            "Papa amarilla",
            "Camote",
            "Tortilla de ma√≠z",
            "Tortilla de nopal",
            "Pan integral",
            "Pan de centeno",
            "Pasta integral",
            "Avena",
            "Quinoa",
            "Trigo sarraceno",
            "Amaranto",
            "Pan pita integral",
            "Harina de avena",
            "Tapioca",
            "Yuca cocida",
            "Elote (mazorca)",
            "Tortilla de avena"
        ]
        
        carbohidratos = st.multiselect(
            "Selecciona los carbohidratos que prefieres:",
            carbohidratos_opciones,
            key="carbohidratos"
        )
        
        # --- L√ÅCTEOS BAJOS EN GRASA ---
        st.markdown("""
        <div class="questionnaire-container">
            <h3>üßÄ L√°cteos bajos en grasa</h3>
        </div>
        """, unsafe_allow_html=True)
        
        lacteos_light_opciones = [
            "Todas las anteriores",
            "Leche descremada",
            "Leche semidescremada",
            "Yogur griego sin az√∫car (0‚Äì2% grasa)",
            "Yogur natural bajo en grasa",
            "Queso panela",
            "Queso cottage bajo en grasa",
            "Reques√≥n bajo en grasa",
            "Leche de almendra sin az√∫car",
            "Leche de soya sin az√∫car",
            "Queso ricotta light",
            "Queso Oaxaca bajo en grasa",
            "Queso manchego light",
            "Queso mozzarella light"
        ]
        
        lacteos_light = st.multiselect(
            "Selecciona los l√°cteos bajos en grasa que prefieres:",
            lacteos_light_opciones,
            key="lacteos_light"
        )
        
        # --- L√ÅCTEOS ALTOS EN GRASA ---
        st.markdown("""
        <div class="questionnaire-container">
            <h3>üßÄ L√°cteos altos en grasa</h3>
        </div>
        """, unsafe_allow_html=True)
        
        lacteos_grasa_opciones = [
            "Todas las anteriores",
            "Leche entera",
            "Crema entera",
            "Mantequilla",
            "Yogur griego entero",
            "Yogur natural entero",
            "Queso manchego",
            "Queso cheddar",
            "Queso crema",
            "Queso Oaxaca",
            "Queso gouda"
        ]
        
        lacteos_grasa = st.multiselect(
            "Selecciona los l√°cteos altos en grasa que prefieres:",
            lacteos_grasa_opciones,
            key="lacteos_grasa"
        )
        
        # --- GRASAS SALUDABLES ---
        st.markdown("""
        <div class="questionnaire-container">
            <h3>ü•ë Grasas saludables</h3>
        </div>
        """, unsafe_allow_html=True)
        
        grasas_opciones = [
            "Todas las anteriores",
            "Aguacate",
            "Aceite de oliva extra virgen",
            "Almendras",
            "Nueces",
            "Mantequilla de man√≠",
            "Mantequilla de almendra",
            "Ch√≠a",
            "Linaza molida",
            "Aceitunas",
            "Tahini (pasta de ajonjol√≠)",
            "Semillas de girasol",
            "Semillas de calabaza",
            "Pistaches",
            "Nueces de la India",
            "Avellanas",
            "Cacahuates naturales",
            "Ghee",
            "Aceite de aguacate",
            "Aceite de coco (con moderaci√≥n)",
            "Crema de cacahuate sin az√∫car"
        ]
        
        grasas = st.multiselect(
            "Selecciona las grasas saludables que prefieres:",
            grasas_opciones,
            key="grasas"
        )
        
        # --- SECCI√ìN DE SUPLEMENTOS ---
        st.markdown("---")
        st.markdown("""
        <div class="questionnaire-container">
            <h3>üíä Suplementos</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            incluir_suplementos = st.radio(
                "¬øDeseas incluir suplementos como parte de tu dieta (prote√≠na en polvo, creatina, etc.)?",
                ["S√≠", "No"]
            )
        
        with col2:
            marcas_preferidas = st.text_area(
                "¬øTienes alguna preferencia espec√≠fica en marcas o tipos?",
                placeholder="Ej: Prote√≠na ISO 100, Creatina Optimum Nutrition...",
                height=100
            )
        
        # --- ALIMENTOS ADICIONALES ---
        st.markdown("""
        <div class="questionnaire-container">
            <h3>‚ûï Alimentos Adicionales</h3>
        </div>
        """, unsafe_allow_html=True)
        
        alimentos_adicionales = st.text_area(
            "¬øHay alg√∫n otro alimento que suelas consumir con frecuencia que no se haya incluido en las listas anteriores y que te gustar√≠a considerar en tu plan?",
            placeholder="Ej: T√© verde, chocolate negro 85%, prote√≠na vegetal, kombucha...",
            height=100
        )
        
        # --- ALERGIAS E INTOLERANCIAS ---
        st.markdown("---")
        st.markdown("""
        <div class="questionnaire-container">
            <h3>‚ö†Ô∏è Alergias e Intolerancias</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            tiene_alergias = st.radio(
                "¬øTienes alguna alergia o intolerancia a alg√∫n alimento?",
                ["No", "S√≠"]
            )
        
        with col2:
            alergias_detalle = ""
            if tiene_alergias == "S√≠":
                alergias_detalle = st.text_area(
                    "En caso afirmativo, ind√≠calo aqu√≠:",
                    placeholder="Ej: Lactosa, gluten, nueces, mariscos, huevos...",
                    height=100
                )
        
        # --- PATRONES ALIMENTARIOS ADICIONALES ---
        st.markdown("---")
        st.markdown("""
        <div class="questionnaire-container">
            <h3>üïí Patrones Alimentarios</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            comidas_dia = st.selectbox(
                "¬øCu√°ntas comidas prefieres hacer al d√≠a?",
                ["3 comidas principales", "3 comidas + 1 snack", "3 comidas + 2 snacks", 
                 "4-5 comidas peque√±as", "6 comidas peque√±as", "Ayuno intermitente"]
            )
            
            cocinar_frecuencia = st.selectbox(
                "¬øCon qu√© frecuencia cocinas en casa?",
                ["Todos los d√≠as", "5-6 d√≠as por semana", "3-4 d√≠as por semana", 
                 "1-2 d√≠as por semana", "Rara vez", "Nunca"]
            )
        
        with col2:
            horario_comidas = st.selectbox(
                "¬øTienes horarios fijos para comer?",
                ["S√≠, muy estrictos", "S√≠, pero flexibles", "A veces", "No, como cuando puedo"]
            )
            
            presupuesto_comida = st.selectbox(
                "¬øCu√°l es tu presupuesto aproximado semanal para comida?",
                ["Menos de $500", "$500-$800", "$800-$1200", "$1200-$1800", "M√°s de $1800", "Sin l√≠mite espec√≠fico"]
            )
        
        # EMAIL OBLIGATORIO
        st.markdown("---")
        st.markdown("""
        <div class="questionnaire-container">
            <h3>üìß Informaci√≥n de Contacto</h3>
        </div>
        """, unsafe_allow_html=True)
        
        email_destinatario = st.text_input("Email para seguimiento (obligatorio):", placeholder="tu@email.com")
        
        submitted = st.form_submit_button("üçΩÔ∏è Enviar Evaluaci√≥n al Entrenador", use_container_width=True)
        
        if submitted:
            # Procesar y limpiar las selecciones
            def procesar_seleccion(lista_seleccionada, lista_completa):
                if "Todas las anteriores" in lista_seleccionada:
                    return [item for item in lista_completa if item != "Todas las anteriores"]
                return lista_seleccionada
            
            proteinas_magras_final = procesar_seleccion(proteinas_magras, proteinas_magras_opciones)
            proteinas_grasa_final = procesar_seleccion(proteinas_grasa, proteinas_grasa_opciones)
            frutas_final = procesar_seleccion(frutas, frutas_opciones)
            vegetales_final = procesar_seleccion(vegetales, vegetales_opciones)
            carbohidratos_final = procesar_seleccion(carbohidratos, carbohidratos_opciones)
            lacteos_light_final = procesar_seleccion(lacteos_light, lacteos_light_opciones)
            lacteos_grasa_final = procesar_seleccion(lacteos_grasa, lacteos_grasa_opciones)
            grasas_final = procesar_seleccion(grasas, grasas_opciones)
            
            # MOSTRAR INFORMACI√ìN M√çNIMA AL USUARIO
            st.success("‚úÖ **¬°Evaluaci√≥n completada con √©xito!**")
            
            st.info("""
            üìß **Tu evaluaci√≥n nutricional ha sido enviada a tu entrenador personal.**
            
            **¬øQu√© sigue?**
            - Tu entrenador analizar√° tus preferencias alimentarias
            - Recibir√°s un plan nutricional personalizado
            - Te contactaremos para coordinar tu alimentaci√≥n
            
            ‚è∞ **Tiempo estimado de respuesta: 24-48 horas**
            
            üí° **Importante:** Mant√©n tu tel√©fono disponible para coordinar detalles.
            """)
            
            # Resumen M√çNIMO para el usuario
            st.markdown("### üìä Confirmaci√≥n de Evaluaci√≥n")
            col1, col2, col3 = st.columns(3)
            
            total_categorias = len([x for x in [proteinas_magras_final, proteinas_grasa_final, frutas_final, vegetales_final, carbohidratos_final, lacteos_light_final, lacteos_grasa_final, grasas_final] if len(x) > 0])
            total_alimentos = len(proteinas_magras_final + proteinas_grasa_final + frutas_final + vegetales_final + carbohidratos_final + lacteos_light_final + lacteos_grasa_final + grasas_final)
            
            with col1:
                st.metric("Categor√≠as Evaluadas", f"{total_categorias}/8")
            
            with col2:
                st.metric("Alimentos Seleccionados", f"{total_alimentos}")
            
            with col3:
                variedad = "Excelente" if total_categorias >= 6 else "Buena" if total_categorias >= 4 else "Limitada"
                st.metric("Variedad Alimentaria", variedad)
            
            st.markdown("""
            ---
            ### üéØ Pr√≥ximos Pasos
            
            1. **Espera el contacto** de tu entrenador MUPAI
            2. **Mant√©n tu alimentaci√≥n actual** hasta recibir indicaciones
            3. **Prep√°rate para disfrutar** de tu plan personalizado
            
            **¬øTienes preguntas urgentes?** Contacta a MUPAI por WhatsApp.
            """)
            
            # ENVIAR EMAIL COMPLETO SOLO AL ENTRENADOR
            if not email_destinatario:
                st.error("‚ö†Ô∏è **Error:** Debes proporcionar un correo electr√≥nico para el seguimiento.")
            else:
                # EMAIL COMPLETO PARA EL ENTRENADOR
                contenido_email = f"""
========================================
üìä NUEVO CLIENTE - PREFERENCIAS ALIMENTARIAS

Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M')}
Email del cliente: {email_destinatario}

========================================
ü•© PROTE√çNAS MAGRAS SELECCIONADAS ({len(proteinas_magras_final)} items)

{', '.join(proteinas_magras_final) if proteinas_magras_final else 'Ninguna seleccionada'}

========================================
ü•ì PROTE√çNAS CON GRASA SELECCIONADAS ({len(proteinas_grasa_final)} items)

{', '.join(proteinas_grasa_final) if proteinas_grasa_final else 'Ninguna seleccionada'}

========================================
üçå FRUTAS SELECCIONADAS ({len(frutas_final)} items)

{', '.join(frutas_final) if frutas_final else 'Ninguna seleccionada'}

========================================
ü•¶ VEGETALES SELECCIONADOS ({len(vegetales_final)} items)

{', '.join(vegetales_final) if vegetales_final else 'Ninguna seleccionada'}

========================================
üç† CARBOHIDRATOS SELECCIONADOS ({len(carbohidratos_final)} items)

{', '.join(carbohidratos_final) if carbohidratos_final else 'Ninguna seleccionada'}

========================================
üßÄ L√ÅCTEOS BAJOS EN GRASA ({len(lacteos_light_final)} items)

{', '.join(lacteos_light_final) if lacteos_light_final else 'Ninguna seleccionada'}

========================================
üßÄ L√ÅCTEOS ALTOS EN GRASA ({len(lacteos_grasa_final)} items)

{', '.join(lacteos_grasa_final) if lacteos_grasa_final else 'Ninguna seleccionada'}

========================================
ü•ë GRASAS SALUDABLES ({len(grasas_final)} items)

{', '.join(grasas_final) if grasas_final else 'Ninguna seleccionada'}

========================================
üíä INFORMACI√ìN DE SUPLEMENTOS

Incluye suplementos: {incluir_suplementos}
Marcas/tipos preferidos: {marcas_preferidas if marcas_preferidas else 'No especificado'}

========================================
‚ûï ALIMENTOS ADICIONALES

{alimentos_adicionales if alimentos_adicionales else 'No especificado'}

========================================
‚ö†Ô∏è ALERGIAS E INTOLERANCIAS

Tiene alergias/intolerancias: {tiene_alergias}
Detalle: {alergias_detalle if alergias_detalle else 'No especificado'}

========================================
üïí PATRONES ALIMENTARIOS

Comidas preferidas al d√≠a: {comidas_dia}
Frecuencia cocinando: {cocinar_frecuencia}
Horarios de comida: {horario_comidas}
Presupuesto semanal: {presupuesto_comida}

========================================
üìä AN√ÅLISIS NUTRICIONAL

Total de categor√≠as con selecciones: {total_categorias}/8
Total de alimentos seleccionados: {total_alimentos}
Variedad alimentaria: {variedad}

INTERPRETACI√ìN:
‚Ä¢ Prote√≠nas: {'‚úÖ Buena variedad' if len(proteinas_magras_final + proteinas_grasa_final) >= 10 else '‚ö†Ô∏è Limitada variedad' if len(proteinas_magras_final + proteinas_grasa_final) >= 5 else 'üî¥ Muy limitada'}
‚Ä¢ Frutas y vegetales: {'‚úÖ Excelente' if len(frutas_final + vegetales_final) >= 15 else '‚ö†Ô∏è Aceptable' if len(frutas_final + vegetales_final) >= 8 else 'üî¥ Insuficiente'}
‚Ä¢ Carbohidratos: {'‚úÖ Buena variedad' if len(carbohidratos_final) >= 8 else '‚ö†Ô∏è Limitada'}
‚Ä¢ L√°cteos: {'‚úÖ Incluye l√°cteos' if len(lacteos_light_final + lacteos_grasa_final) > 0 else '‚ö†Ô∏è No incluye l√°cteos'}
‚Ä¢ Grasas: {'‚úÖ Buena variedad' if len(grasas_final) >= 8 else '‚ö†Ô∏è Limitada'}

RECOMENDACIONES PARA EL PLAN:
‚Ä¢ {'Priorizar prote√≠nas magras' if len(proteinas_magras_final) > len(proteinas_grasa_final) else 'Incluir m√°s prote√≠nas magras'}
‚Ä¢ {'Aprovechar la gran variedad de frutas/vegetales' if len(frutas_final + vegetales_final) >= 15 else 'Incorporar gradualmente m√°s frutas/vegetales'}
‚Ä¢ {'Cliente acepta suplementos - considerar prote√≠na en polvo' if incluir_suplementos == 'S√≠' else 'Cliente no desea suplementos - plan 100% alimentos'}
‚Ä¢ {'Considerar restricciones: ' + alergias_detalle if tiene_alergias == 'S√≠' else 'Sin restricciones alimentarias'}

========================================
üìù NOTAS PARA EL ENTRENADOR

Cliente evaluado el {datetime.now().strftime('%Y-%m-%d %H:%M')}

Perfil nutricional {'completo' if total_categorias >= 6 else 'parcial'}

Prioridad: {'est√°ndar' if total_categorias >= 4 else 'alta (variedad limitada)'}

Contactar en pr√≥ximas 24-48 horas para plan personalizado

========================================
"""
                
                # Enviar SOLO al entrenador con seguridad mejorada
                try:
                    trainer_email = st.secrets.get("trainer_email", "mupaitraining@outlook.com")
                    enviar_email_resultados(trainer_email, 
                                          f"NUEVO CLIENTE PREFERENCIAS - {email_destinatario}", 
                                          contenido_email)
                    st.success("‚úÖ Evaluaci√≥n enviada correctamente al entrenador")
                except Exception as e:
                    st.error(f"‚ùå Error al enviar email: {str(e)}")

# ==================== CUESTIONARIO ANTOJOS ALIMENTARIOS ====================
elif st.session_state.page == "antojos_alimentarios":
    st.markdown("""
    <div class="section-header">
        <h2>üßÅ Cuestionario de Antojos Alimentarios (Food Cravings)</h2>
        <h3>Versi√≥n Poblaci√≥n Mexicana</h3>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="questionnaire-container">
        <h3>üéØ Objetivo del Cuestionario</h3>
        <p>Este cuestionario tiene como objetivo identificar tu <strong>perfil personal de antojos alimentarios</strong>. 
        Responde con sinceridad para cada grupo de alimentos. Esto nos permitir√° adaptar tu plan nutricional 
        considerando tus patrones de antojos y estrategias de manejo.</p>
        
        <h4>üìã Cada secci√≥n incluye:</h4>
        <ul>
            <li>üîÑ Frecuencia del antojo</li>
            <li>‚è∞ Momento del d√≠a en que aparece</li>
            <li>üí™ Intensidad del antojo</li>
            <li>üéØ Capacidad de controlarlo</li>
            <li>‚ö° Conducta ante el antojo</li>
            <li>üé≠ Emoci√≥n detonante principal</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    categorias_antojos_mexicanas = [
        {
            "emoji": "üßÅ",
            "nombre": "Panes dulces",
            "ejemplos": "Gansito, Donitas Bimbo, Barritas, Roles, Cuernitos, Bigotes, Ping√ºinos, Mantecadas"
        },
        {
            "emoji": "üçü",
            "nombre": "Frituras",
            "ejemplos": "Sabritas, Ruffles, Doritos, Chetos, Takis, Chips, Rancheritos"
        },
        {
            "emoji": "üç´",
            "nombre": "Chocolates y dulces",
            "ejemplos": "Carlos V, Snickers, Kinder Bueno, M&M's, Paletas Payaso, Trufas, Gomitas"
        },
        {
            "emoji": "üßÄ",
            "nombre": "Quesos grasos y snacks salados",
            "ejemplos": "Manchego, Oaxaca, Gouda, Queso crema, Queso con totopos, Queso fundido, Salchichas"
        },
        {
            "emoji": "üçû",
            "nombre": "Pan blanco, bolillos, teleras, baguettes",
            "ejemplos": "Bolillo, Telera, Baguette, Pan dulce, Concha, Empanada dulce"
        },
        {
            "emoji": "ü•§",
            "nombre": "Refrescos y bebidas azucaradas",
            "ejemplos": "Coca-Cola, Pepsi, Sprite, Jarritos, Sidral, Boing, Del Valle, Jumex, Powerade, Gatorade"
        },
        {
            "emoji": "üç®",
            "nombre": "Helados y postres fr√≠os",
            "ejemplos": "Helado de vainilla, Chocolate, Fresa, Paletas de hielo, Nieve, Magnum, Cornetto"
        },
        {
            "emoji": "ü•ô",
            "nombre": "Comida r√°pida mexicana",
            "ejemplos": "Tacos al pastor, Quesadillas, Tortas, Tamales, Pozole, Flautas, Sopes"
        },
        {
            "emoji": "üçï",
            "nombre": "Pizza y comida r√°pida internacional",
            "ejemplos": "Pizza, Hamburguesas, Hot dogs, Papas fritas, Alitas, Nuggets"
        },
        {
            "emoji": "üç∫",
            "nombre": "Alcohol y bebidas fermentadas",
            "ejemplos": "Cerveza, Tequila, Mezcal, Vino, Micheladas, Pulque, Tepache"
        }
    ]
    
    with st.form("antojos_alimentarios_form"):
        resultados_antojos = {}
        
        for i, categoria in enumerate(categorias_antojos_mexicanas):
            st.markdown(f"""
            <div class="questionnaire-container">
                <h3>{categoria['emoji']} {categoria['nombre']}</h3>
                <p style="font-style: italic; color: #666;">Ejemplos: {categoria['ejemplos']}</p>
            </div>
            """, unsafe_allow_html=True)
            
            col1, col2 = st.columns(2)
            
            with col1:
                frecuencia = st.selectbox(
                    f"¬øCon qu√© frecuencia tienes antojos de {categoria['nombre'].lower()}?",
                    ["Nunca", "Rara vez (1-2 veces/mes)", "A veces (1-2 veces/semana)", 
                     "Frecuentemente (3-4 veces/semana)", "Muy frecuentemente (diario)"],
                    key=f"freq_{i}"
                )
                
                momento = st.selectbox(
                    "¬øEn qu√© momento del d√≠a aparece m√°s?",
                    ["Ma√±ana", "Media ma√±ana", "Mediod√≠a", "Tarde", "Noche", "Madrugada", "Todo el d√≠a"],
                    key=f"momento_{i}"
                )
                
                intensidad = st.slider(
                    "Intensidad del antojo (1 = Muy d√©bil, 10 = Irresistible)",
                    1, 10, 5, key=f"intensidad_{i}"
                )
            
            with col2:
                control = st.selectbox(
                    "¬øQu√© tan f√°cil es controlar este antojo?",
                    ["Muy f√°cil", "F√°cil", "Moderado", "Dif√≠cil", "Muy dif√≠cil"],
                    key=f"control_{i}"
                )
                
                conducta = st.selectbox(
                    "¬øQu√© haces cuando tienes este antojo?",
                    ["Lo ignoro completamente", "Trato de sustituirlo", "Cedo parcialmente", 
                     "Cedo completamente", "Como m√°s de lo planeado"],
                    key=f"conducta_{i}"
                )
                
                emocion = st.selectbox(
                    "¬øQu√© emoci√≥n lo detona principalmente?",
                    ["Ninguna en particular", "Estr√©s", "Ansiedad", "Tristeza", "Aburrimiento", 
                     "Felicidad", "Nostalgia", "Cansancio"],
                    key=f"emocion_{i}"
                )
            
            resultados_antojos[categoria['nombre']] = {
                'frecuencia': frecuencia,
                'momento': momento,
                'intensidad': intensidad,
                'control': control,
                'conducta': conducta,
                'emocion': emocion
            }
            
            st.markdown("---")
        
        # EMAIL OBLIGATORIO
        st.markdown("""
        <div class="questionnaire-container">
            <h3>üìß Informaci√≥n de Contacto</h3>
        </div>
        """, unsafe_allow_html=True)
        
        email_destinatario = st.text_input("Email para seguimiento (obligatorio):", placeholder="tu@email.com")
        
        submitted = st.form_submit_button("üßÅ Enviar Evaluaci√≥n al Entrenador", use_container_width=True)
        
        if submitted:
            # MOSTRAR INFORMACI√ìN M√çNIMA AL USUARIO
            st.success("‚úÖ **¬°Evaluaci√≥n completada con √©xito!**")
            
            st.info("""
            üìß **Tu evaluaci√≥n de antojos ha sido enviada a tu entrenador personal.**
            
            **¬øQu√© sigue?**
            - Tu entrenador analizar√° tus patrones de antojos
            - Recibir√°s estrategias personalizadas de manejo
            - Te contactaremos para coordinar tu plan integral
            
            ‚è∞ **Tiempo estimado de respuesta: 24-48 horas**
            
            üí° **Importante:** Mant√©n tu tel√©fono disponible para coordinar detalles.
            """)
            
            # An√°lisis B√ÅSICO para el usuario
            antojos_frecuentes = [k for k, v in resultados_antojos.items() 
                                if v['frecuencia'] in ["Frecuentemente (3-4 veces/semana)", "Muy frecuentemente (diario)"]]
            
            intensidad_promedio = sum([v['intensidad'] for v in resultados_antojos.values()]) / len(resultados_antojos)
            
            antojos_dificiles = [k for k, v in resultados_antojos.items() 
                               if v['control'] in ["Dif√≠cil", "Muy dif√≠cil"]]
            
            # Resumen M√çNIMO para el usuario
            st.markdown("### üìä Confirmaci√≥n de Evaluaci√≥n")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Categor√≠as Evaluadas", "10/10")
            
            with col2:
                st.metric("Antojos Identificados", f"{len(antojos_frecuentes)}")
            
            with col3:
                nivel_riesgo = "Alto" if len(antojos_frecuentes) >= 4 else "Medio" if len(antojos_frecuentes) >= 2 else "Bajo"
                st.metric("Nivel de Manejo", nivel_riesgo)
            
            st.markdown("""
            ---
            ### üéØ Pr√≥ximos Pasos
            
            1. **Espera el contacto** de tu entrenador MUPAI
            2. **Mant√©n tu alimentaci√≥n actual** hasta recibir indicaciones
            3. **Prep√°rate para aprender** estrategias de manejo efectivas
            
            **¬øTienes preguntas urgentes?** Contacta a MUPAI por WhatsApp.
            """)
            
            # ENVIAR EMAIL COMPLETO SOLO AL ENTRENADOR
            if not email_destinatario:
                st.error("‚ö†Ô∏è **Error:** Debes proporcionar un correo electr√≥nico para el seguimiento.")
            else:
                # Calcular an√°lisis detallado
                emociones_principales = [v['emocion'] for v in resultados_antojos.values() 
                                       if v['frecuencia'] != "Nunca"]
                emociones_frecuentes = Counter(emociones_principales).most_common(3)
                
                momentos_principales = [v['momento'] for v in resultados_antojos.values() 
                                      if v['frecuencia'] != "Nunca"]
                momentos_frecuentes = Counter(momentos_principales).most_common(3)
                
                # EMAIL COMPLETO PARA EL ENTRENADOR
                contenido_email = f"""
========================================
üìä NUEVO CLIENTE - ANTOJOS ALIMENTARIOS

Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M')}
Email del cliente: {email_destinatario}

========================================
üßÅ AN√ÅLISIS DETALLADO POR CATEGOR√çA

"""
                
                for categoria, datos in resultados_antojos.items():
                    emoji = next(c['emoji'] for c in categorias_antojos_mexicanas if c['nombre'] == categoria)
                    contenido_email += f"""
{emoji} {categoria.upper()}:
‚Ä¢ Frecuencia: {datos['frecuencia']}
‚Ä¢ Momento: {datos['momento']}
‚Ä¢ Intensidad: {datos['intensidad']}/10
‚Ä¢ Control: {datos['control']}
‚Ä¢ Conducta: {datos['conducta']}
‚Ä¢ Emoci√≥n detonante: {datos['emocion']}

"""
                
                contenido_email += f"""

========================================
üìä RESUMEN EJECUTIVO

Antojos frecuentes ({len(antojos_frecuentes)} categor√≠as):
{', '.join(antojos_frecuentes) if antojos_frecuentes else 'Ninguno'}

Antojos dif√≠ciles de controlar ({len(antojos_dificiles)} categor√≠as):
{', '.join(antojos_dificiles) if antojos_dificiles else 'Ninguno'}

Intensidad promedio: {intensidad_promedio:.1f}/10

Nivel de riesgo: {nivel_riesgo}

========================================
üé≠ AN√ÅLISIS DE EMOCIONES DETONANTES

"""
                
                if emociones_frecuentes:
                    for emocion, frecuencia in emociones_frecuentes:
                        contenido_email += f"‚Ä¢ {emocion}: {frecuencia} categor√≠as afectadas\n"
                else:
                    contenido_email += "‚Ä¢ No se identificaron emociones detonantes significativas\n"
                
                contenido_email += f"""

========================================
‚è∞ AN√ÅLISIS DE MOMENTOS DE MAYOR RIESGO

"""
                
                if momentos_frecuentes:
                    for momento, frecuencia in momentos_frecuentes:
                        contenido_email += f"‚Ä¢ {momento}: {frecuencia} categor√≠as afectadas\n"
                else:
                    contenido_email += "‚Ä¢ No se identificaron momentos de mayor riesgo\n"
                
                contenido_email += f"""

========================================
üéØ RECOMENDACIONES ESPEC√çFICAS

"""
                
                # Generar recomendaciones basadas en el an√°lisis
                if len(antojos_frecuentes) >= 4:
                    contenido_email += "‚ö†Ô∏è PRIORIDAD ALTA - M√∫ltiples antojos frecuentes\n"
                    contenido_email += "‚Ä¢ Implementar estrategias de manejo emocional\n"
                    contenido_email += "‚Ä¢ Planificar comidas estructuradas\n"
                    contenido_email += "‚Ä¢ Considerar sustitutos saludables\n\n"
                
                if intensidad_promedio >= 7:
                    contenido_email += "‚ö†Ô∏è INTENSIDAD ALTA - Antojos muy fuertes\n"
                    contenido_email += "‚Ä¢ Trabajar en t√©cnicas de control de impulsos\n"
                    contenido_email += "‚Ä¢ Identificar triggers espec√≠ficos\n\n"
                
                if emociones_frecuentes:
                    emocion_principal = emociones_frecuentes[0][0]
                    if emocion_principal == "Estr√©s":
                        contenido_email += "üßò ENFOQUE: Manejo del estr√©s\n"
                        contenido_email += "‚Ä¢ T√©cnicas de respiraci√≥n y mindfulness\n"
                        contenido_email += "‚Ä¢ Ejercicio regular para reducir cortisol\n"
                        contenido_email += "‚Ä¢ Planificar snacks anti-estr√©s\n\n"
                    elif emocion_principal == "Aburrimiento":
                        contenido_email += "üéØ ENFOQUE: Actividades alternativas\n"
                        contenido_email += "‚Ä¢ Lista de actividades para momentos de aburrimiento\n"
                        contenido_email += "‚Ä¢ Horarios estructurados\n"
                        contenido_email += "‚Ä¢ Hobbies que mantengan las manos ocupadas\n\n"
                    elif emocion_principal == "Ansiedad":
                        contenido_email += "üòå ENFOQUE: Manejo de ansiedad\n"
                        contenido_email += "‚Ä¢ T√©cnicas de grounding\n"
                        contenido_email += "‚Ä¢ Infusiones relajantes\n"
                        contenido_email += "‚Ä¢ Ejercicio de baja intensidad\n\n"
                
                contenido_email += f"""

========================================
üõ°Ô∏è ESTRATEGIAS DE INTERVENCI√ìN SUGERIDAS

1. SUSTITUCI√ìN INTELIGENTE:
‚Ä¢ Preparar versiones saludables de antojos principales
‚Ä¢ Tener opciones disponibles en momentos de riesgo

2. CONTROL AMBIENTAL:
‚Ä¢ Limitar acceso a alimentos problema
‚Ä¢ Estructurar ambiente alimentario

3. MANEJO EMOCIONAL:
‚Ä¢ T√©cnicas espec√≠ficas para emociones detonantes
‚Ä¢ Diario de antojos para identificar patrones

4. TIMING ESTRAT√âGICO:
‚Ä¢ Planificar peque√±as porciones en momentos controlados
‚Ä¢ Evitar restricci√≥n extrema que intensifique antojos

5. APOYO NUTRICIONAL:
‚Ä¢ Comidas balanceadas que reduzcan antojos
‚Ä¢ Hidrataci√≥n adecuada
‚Ä¢ Sue√±o reparador

========================================
üìù NOTAS PARA EL ENTRENADOR

Cliente evaluado el {datetime.now().strftime('%Y-%m-%d %H:%M')}

Perfil de antojos {'complejo' if len(antojos_frecuentes) >= 3 else 'moderado' if len(antojos_frecuentes) >= 1 else 'simple'}

Prioridad de intervenci√≥n: {'alta' if len(antojos_frecuentes) >= 4 or intensidad_promedio >= 7 else 'media' if len(antojos_frecuentes) >= 2 else 'baja'}

Requiere seguimiento {'semanal' if len(antojos_frecuentes) >= 3 else 'quincenal'}

Contactar en pr√≥ximas 24-48 horas

ALERTAS ESPECIALES:
{'‚Ä¢ M√∫ltiples antojos frecuentes - requiere plan integral' if len(antojos_frecuentes) >= 4 else ''}
{'‚Ä¢ Intensidad muy alta - riesgo de abandono' if intensidad_promedio >= 8 else ''}
{'‚Ä¢ Dificultad de control - necesita apoyo emocional' if len(antojos_dificiles) >= 3 else ''}

========================================
"""
                
                # Enviar SOLO al entrenador con seguridad mejorada
                try:
                    trainer_email = st.secrets.get("trainer_email", "mupaitraining@outlook.com")
                    enviar_email_resultados(trainer_email, 
                                          f"NUEVO CLIENTE ANTOJOS - {email_destinatario}", 
                                          contenido_email)
                    st.success("‚úÖ Evaluaci√≥n enviada correctamente al entrenador")
                except Exception as e:
                    st.error(f"‚ùå Error al enviar email: {str(e)}")

# ==================== CUESTIONARIO FBEO ====================
elif st.session_state.page == "cuestionario_fbeo":
    try:
        from cuestionario_fbeo import mostrar_cuestionario_fbeo
        mostrar_cuestionario_fbeo()
    except ImportError:
        st.error("‚ö†Ô∏è El m√≥dulo cuestionario_fbeo no est√° disponible. Por favor, verifica que el archivo existe.")
        st.info("Esta funcionalidad estar√° disponible pr√≥ximamente.")

# ==================== P√ÅGINAS ADICIONALES ====================
elif st.session_state.page == "about":
    st.markdown("""
    <div class="section-header">
        <h2>üë®‚Äçüéì Acerca del Profesional</h2>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="professional-profile">
        <h3>üéì Erick Francisco De Luna Hern√°ndez</h3>
        <p><strong>Maestr√≠a en Fuerza y Acondicionamiento</strong></p>
        <p><strong>Ciencias del Ejercicio - UANL</strong></p>
        
        <h4>üèÜ Especialidades:</h4>
        <ul>
            <li>Entrenamiento basado en evidencia cient√≠fica</li>
            <li>Periodizaci√≥n del entrenamiento</li>
            <li>Nutrici√≥n deportiva y composici√≥n corporal</li>
            <li>An√°lisis biomec√°nico del movimiento</li>
            <li>Programas de recomposici√≥n corporal</li>
        </ul>
        
        <h4>üìö Formaci√≥n Acad√©mica:</h4>
        <ul>
            <li>Maestr√≠a en Ciencias del Ejercicio - UANL</li>
            <li>Certificaci√≥n en Fuerza y Acondicionamiento</li>
            <li>Especializaci√≥n en Nutrici√≥n Deportiva</li>
            <li>Cursos avanzados en Biomec√°nica</li>
        </ul>
        
        <h4>üíº Experiencia Profesional:</h4>
        <ul>
            <li>+5 a√±os en entrenamiento personalizado</li>
            <li>Desarrollo de programas digitales de fitness</li>
            <li>Consultor√≠a nutricional especializada</li>
            <li>Investigaci√≥n en ciencias del ejercicio</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

elif st.session_state.page == "contacto":
    st.markdown("""
    <div class="section-header">
        <h2>üìû Contacto</h2>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="results-container">
        <h3>üí™ MUPAI - Entrenamiento Digital Basado en Ciencia</h3>
        <p><strong>Dirigido por:</strong> Erick Francisco De Luna Hern√°ndez</p>
        <p><strong>Especialidad:</strong> Maestr√≠a en Fuerza y Acondicionamiento | Ciencias del Ejercicio UANL</p>
        <br>
        <p>üìß <strong>Email:</strong> mupaitraining@outlook.com</p>
        <p>üì± <strong>WhatsApp:</strong> +52 XXX XXX XXXX</p>
        <p>üåê <strong>Sitio Web:</strong> www.mupai.com</p>
        
        <h4>üïê Horarios de Atenci√≥n:</h4>
        <p>Lunes a Viernes: 9:00 AM - 6:00 PM</p>
        <p>S√°bados: 9:00 AM - 2:00 PM</p>
        <p>Domingos: Solo emergencias</p>
        
        <h4>üìç Ubicaci√≥n:</h4>
        <p>Monterrey, Nuevo Le√≥n, M√©xico</p>
        <p>Consultas presenciales y virtuales disponibles</p>
    </div>
    """, unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 10px;">
    <h3 style="color: #000; margin-bottom: 1rem;">üí™ MUPAI - Entrenamiento Digital Basado en Ciencia</h3>
    <p style="color: #666; margin-bottom: 0.5rem;">Dirigido por <strong>Erick Francisco De Luna Hern√°ndez</strong></p>
    <p style="color: #666; margin-bottom: 1rem;">Maestr√≠a en Fuerza y Acondicionamiento | Ciencias del Ejercicio UANL</p>
    <p style="color: #888; font-size: 0.9rem;">¬© 2025 MUPAI. Todos los derechos reservados.</p>
    <p style="color: #888; font-size: 0.8rem;">Respaldado por evidencia cient√≠fica y tecnolog√≠a avanzada</p>
</div>
""", unsafe_allow_html=True)
