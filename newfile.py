import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np
from datetime import datetime
import base64
import os

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="MUPAI - Entrenamiento Digital Profesional",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ---- COLORES OFICIALES MUPAI ----
MUPAI_COLORS = {
    'primary': '#FFCC00',      # Amarillo dorado
    'secondary': '#000000',    # Negro
    'accent': '#FFFFFF',       # Blanco
    'dark_gray': '#333333',
    'light_gray': '#F5F5F5',
    'success': '#28A745',
    'warning': '#FFC107',
    'danger': '#DC3545',
    'info': '#17A2B8'
}

# ---- CSS PROFESIONAL PERSONALIZADO ----
def apply_custom_css():
    css_content = f"""
    <style>
    /* Variables CSS */
    :root {{
        --mupai-primary: {MUPAI_COLORS['primary']};
        --mupai-secondary: {MUPAI_COLORS['secondary']};
        --mupai-accent: {MUPAI_COLORS['accent']};
        --mupai-dark-gray: {MUPAI_COLORS['dark_gray']};
        --mupai-light-gray: {MUPAI_COLORS['light_gray']};
    }}
    
    /* Fondo principal */
    .main {{
        background: linear-gradient(135deg, #FFFFFF 0%, #F8F9FA 100%);
        padding: 2rem 1rem;
    }}
    
    /* Sidebar personalizado */
    .css-1d391kg {{
        background: linear-gradient(180deg, {MUPAI_COLORS['secondary']} 0%, {MUPAI_COLORS['dark_gray']} 100%);
    }}
    
    .css-1d391kg .css-10trblm {{
        color: {MUPAI_COLORS['accent']};
    }}
    
    /* Botones principales */
    .stButton > button {{
        background: linear-gradient(90deg, {MUPAI_COLORS['primary']} 0%, #E6B800 100%);
        color: {MUPAI_COLORS['secondary']};
        border: none;
        border-radius: 12px;
        font-weight: 700;
        font-size: 16px;
        padding: 0.75rem 1.5rem;
        box-shadow: 0 4px 12px rgba(255, 204, 0, 0.3);
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 1px;
    }}
    
    .stButton > button:hover {{
        background: linear-gradient(90deg, #E6B800 0%, {MUPAI_COLORS['primary']} 100%);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(255, 204, 0, 0.4);
    }}
    
    /* M√©tricas personalizadas */
    .metric-card {{
        background: linear-gradient(135deg, {MUPAI_COLORS['accent']} 0%, {MUPAI_COLORS['light_gray']} 100%);
        border: 2px solid {MUPAI_COLORS['primary']};
        border-radius: 16px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        text-align: center;
    }}
    
    .metric-value {{
        font-size: 2.5rem;
        font-weight: 800;
        color: {MUPAI_COLORS['secondary']};
        margin: 0;
    }}
    
    .metric-label {{
        font-size: 1.1rem;
        color: {MUPAI_COLORS['dark_gray']};
        margin: 0.5rem 0 0 0;
        text-transform: uppercase;
        letter-spacing: 1px;
    }}
    
    /* T√≠tulos */
    h1 {{
        color: {MUPAI_COLORS['secondary']};
        font-weight: 800;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    }}
    
    h2 {{
        color: {MUPAI_COLORS['secondary']};
        border-bottom: 3px solid {MUPAI_COLORS['primary']};
        padding-bottom: 0.5rem;
        margin-top: 2rem;
    }}
    
    h3 {{
        color: {MUPAI_COLORS['dark_gray']};
        margin-top: 1.5rem;
    }}
    
    /* Expanders */
    .streamlit-expanderHeader {{
        background: linear-gradient(90deg, {MUPAI_COLORS['primary']} 0%, #FFD633 100%);
        color: {MUPAI_COLORS['secondary']};
        font-weight: 700;
        border-radius: 8px;
        border: none;
    }}
    
    /* Radio buttons */
    .stRadio > div {{
        background: {MUPAI_COLORS['light_gray']};
        padding: 0.5rem;
        border-radius: 8px;
        border: 1px solid {MUPAI_COLORS['primary']};
    }}
    
    /* Progress bars */
    .stProgress > div > div > div > div {{
        background: linear-gradient(90deg, {MUPAI_COLORS['primary']} 0%, #E6B800 100%);
    }}
    
    /* Success/Warning/Error alerts */
    .stSuccess {{
        background: linear-gradient(90deg, {MUPAI_COLORS['success']} 0%, #34CE57 100%);
        color: white;
        border-radius: 8px;
    }}
    
    .stWarning {{
        background: linear-gradient(90deg, {MUPAI_COLORS['warning']} 0%, {MUPAI_COLORS['primary']} 100%);
        color: {MUPAI_COLORS['secondary']};
        border-radius: 8px;
    }}
    
    .stError {{
        background: linear-gradient(90deg, {MUPAI_COLORS['danger']} 0%, #E8495A 100%);
        color: white;
        border-radius: 8px;
    }}
    
    /* Cards especiales */
    .service-card {{
        background: linear-gradient(135deg, {MUPAI_COLORS['accent']} 0%, {MUPAI_COLORS['light_gray']} 100%);
        border-left: 5px solid {MUPAI_COLORS['primary']};
        padding: 1.5rem;
        margin: 1rem 0;
        border-radius: 0 12px 12px 0;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }}
    
    /* Dividers */
    hr {{
        border: none;
        height: 3px;
        background: linear-gradient(90deg, {MUPAI_COLORS['primary']} 0%, #E6B800 100%);
        margin: 2rem 0;
    }}
    
    /* Footer */
    .footer {{
        background: linear-gradient(90deg, {MUPAI_COLORS['secondary']} 0%, {MUPAI_COLORS['dark_gray']} 100%);
        color: {MUPAI_COLORS['accent']};
        padding: 2rem;
        text-align: center;
        border-radius: 12px;
        margin-top: 3rem;
    }}
    
    /* Imagen placeholder */
    .image-placeholder {{
        background: linear-gradient(45deg, {MUPAI_COLORS['light_gray']} 25%, transparent 25%), 
                    linear-gradient(-45deg, {MUPAI_COLORS['light_gray']} 25%, transparent 25%),
                    linear-gradient(45deg, transparent 75%, {MUPAI_COLORS['light_gray']} 75%), 
                    linear-gradient(-45deg, transparent 75%, {MUPAI_COLORS['light_gray']} 75%);
        background-size: 20px 20px;
        background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
        border: 2px dashed {MUPAI_COLORS['primary']};
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        color: {MUPAI_COLORS['dark_gray']};
        margin: 1rem 0;
    }}
    </style>
    """
    st.markdown(css_content, unsafe_allow_html=True)

# Aplicar CSS
apply_custom_css()

# ---- FUNCIONES DE UTILIDAD ----
def create_metric_card(label, value, delta=None):
    """Crear tarjeta de m√©trica personalizada"""
    delta_html = ""
    if delta:
        delta_color = MUPAI_COLORS['success'] if delta > 0 else MUPAI_COLORS['danger']
        delta_html = f'<p style="color: {delta_color}; font-size: 0.9rem; margin: 0;">{"‚Üó" if delta > 0 else "‚Üò"} {abs(delta)}</p>'
    
    return f"""
    <div class="metric-card">
        <h2 class="metric-value">{value}</h2>
        <p class="metric-label">{label}</p>
        {delta_html}
    </div>
    """

def create_gauge_chart(value, title, max_value=100, color=MUPAI_COLORS['primary']):
    """Crear gr√°fico de gauge personalizado"""
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = value,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': title, 'font': {'size': 24, 'color': MUPAI_COLORS['secondary']}},
        delta = {'reference': max_value/2},
        gauge = {
            'axis': {'range': [None, max_value], 'tickcolor': MUPAI_COLORS['secondary']},
            'bar': {'color': color},
            'steps': [
                {'range': [0, max_value/3], 'color': MUPAI_COLORS['light_gray']},
                {'range': [max_value/3, 2*max_value/3], 'color': '#FFE066'},
                {'range': [2*max_value/3, max_value], 'color': color}
            ],
            'threshold': {
                'line': {'color': MUPAI_COLORS['danger'], 'width': 4},
                'thickness': 0.75,
                'value': max_value * 0.9
            }
        }
    ))
    
    fig.update_layout(
        paper_bgcolor="rgba(0,0,0,0)",
        plot_bgcolor="rgba(0,0,0,0)",
        font={'color': MUPAI_COLORS['secondary']},
        height=400
    )
    return fig

def create_radar_chart(categories, values, title):
    """Crear gr√°fico radar personalizado"""
    fig = go.Figure()
    
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        fillcolor=f'rgba(255, 204, 0, 0.3)',
        line=dict(color=MUPAI_COLORS['primary'], width=3),
        marker=dict(color=MUPAI_COLORS['primary'], size=8),
        name='Tu Puntuaci√≥n'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100],
                tickfont=dict(color=MUPAI_COLORS['secondary']),
                gridcolor=MUPAI_COLORS['light_gray']
            ),
            angularaxis=dict(
                tickfont=dict(color=MUPAI_COLORS['secondary'], size=12)
            )
        ),
        showlegend=False,
        title=dict(
            text=title,
            font=dict(size=20, color=MUPAI_COLORS['secondary']),
            x=0.5
        ),
        paper_bgcolor="rgba(0,0,0,0)",
        plot_bgcolor="rgba(0,0,0,0)",
        height=500
    )
    return fig

def safe_image(image_path, caption="", use_container_width=True, fallback_text="Imagen no disponible"):
    """Mostrar imagen o placeholder"""
    if os.path.exists(image_path):
        st.image(image_path, caption=caption, use_container_width=use_container_width)
    else:
        placeholder_html = f"""
        <div class="image-placeholder">
            <h3>üì∑ {fallback_text}</h3>
            <p>{image_path}</p>
        </div>
        """
        st.markdown(placeholder_html, unsafe_allow_html=True)

# ---- FUNCIONES DE CUESTIONARIOS CON GR√ÅFICOS ----

def cuestionario_calidad_sueno():
    """Cuestionario de calidad del sue√±o con visualizaciones"""
    st.markdown('<h1>üåô Evaluaci√≥n de la Calidad del Sue√±o</h1>', unsafe_allow_html=True)
    st.markdown("### √çndice de Pittsburgh - PSQI")
    
    # Crear columnas para mejor layout
    col1, col2 = st.columns([2, 1])
    
    with col1:
        with st.expander("üìÖ Horarios de sue√±o", expanded=True):
            subcol1, subcol2 = st.columns(2)
            with subcol1:
                hora_acostarse = st.text_input("¬øA qu√© hora te acuestas?", key="hora_acostarse", placeholder="ej: 23:00")
            with subcol2:
                hora_levantarse = st.text_input("¬øA qu√© hora te levantas?", key="hora_levantarse", placeholder="ej: 07:00")
            
            subcol3, subcol4 = st.columns(2)
            with subcol3:
                tiempo_dormirse = st.slider("Tiempo para dormirte (min)", 0, 120, 15, key="tiempo_dormirse")
            with subcol4:
                horas_dormidas = st.slider("Horas de sue√±o por noche", 0, 12, 7, key="horas_dormidas")

        with st.expander("‚ö†Ô∏è Problemas para dormir", expanded=True):
            opciones_frecuencia = ["Ninguna vez", "Menos de una vez/semana", "1-2 veces/semana", "3+ veces/semana"]
            
            problemas_dormir = {}
            problemas_lista = [
                ("No poder conciliar el sue√±o en 30 min", "problema_conciliar"),
                ("Despertarte durante la noche", "problema_despertar"),
                ("Ir al ba√±o durante la noche", "problema_ba√±o"),
                ("No poder respirar bien", "problema_respirar"),
                ("Toser o roncar fuerte", "problema_roncar"),
                ("Sentir fr√≠o", "problema_frio"),
                ("Sentir calor", "problema_calor"),
                ("Tener pesadillas", "problema_pesadillas"),
                ("Sentir dolor", "problema_dolor")
            ]
            
            for problema, key in problemas_lista:
                problemas_dormir[problema] = st.select_slider(
                    problema, opciones_frecuencia, key=key
                )

        with st.expander("üíä Medicaci√≥n y otros factores"):
            uso_medicacion = st.select_slider(
                "Uso de medicamentos para dormir",
                opciones_frecuencia,
                key="uso_medicacion"
            )
            
            disfuncion_diurna_1 = st.select_slider(
                "Problemas para mantenerte despierto/a",
                opciones_frecuencia,
                key="disfuncion_1"
            )
            
            disfuncion_diurna_2 = st.select_slider(
                "Dificultad para mantener el entusiasmo",
                opciones_frecuencia,
                key="disfuncion_2"
            )
            
            calidad_sueno = st.select_slider(
                "Calidad general del sue√±o",
                ["Muy buena", "Bastante buena", "Bastante mala", "Muy mala"],
                key="calidad_sueno"
            )

    with col2:
        st.markdown("### üí° Consejos para mejor sue√±o")
        st.info("""
        **Higiene del sue√±o:**
        ‚Ä¢ Horarios regulares
        ‚Ä¢ Ambiente fresco y oscuro
        ‚Ä¢ Evitar pantallas 1h antes
        ‚Ä¢ Actividad f√≠sica regular
        ‚Ä¢ Evitar cafe√≠na tarde
        """)

    if st.button("üìä Analizar Calidad del Sue√±o", use_container_width=True, type="primary", key="calc_psqi"):
        try:
            # C√°lculos PSQI
            puntuacion = {"Ninguna vez": 0, "Menos de una vez/semana": 1, "1-2 veces/semana": 2, "3+ veces/semana": 3}
            calidad_puntuacion = {"Muy buena": 0, "Bastante buena": 1, "Bastante mala": 2, "Muy mala": 3}

            componente_1 = calidad_puntuacion[calidad_sueno]
            componente_2 = min(3, tiempo_dormirse // 15)
            componente_3 = 0 if horas_dormidas >= 7 else (1 if horas_dormidas >= 6 else (2 if horas_dormidas >= 5 else 3))
            componente_4 = min(3, sum(puntuacion.get(v, 0) for v in problemas_dormir.values()) // 3)
            componente_5 = puntuacion.get(uso_medicacion, 0)
            componente_6 = min(3, (puntuacion.get(disfuncion_diurna_1, 0) + puntuacion.get(disfuncion_diurna_2, 0)) // 2)

            total_puntuacion = componente_1 + componente_2 + componente_3 + componente_4 + componente_5 + componente_6
            porcentaje_calidad = max(0, 100 - (total_puntuacion * 100 / 21))

            st.markdown("---")
            st.markdown("## üìä Resultados del An√°lisis")
            
            # M√©tricas principales
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.markdown(create_metric_card("Puntuaci√≥n PSQI", f"{total_puntuacion}/21"), unsafe_allow_html=True)
            with col2:
                st.markdown(create_metric_card("Calidad (%)", f"{porcentaje_calidad:.0f}%"), unsafe_allow_html=True)
            with col3:
                st.markdown(create_metric_card("Horas de Sue√±o", f"{horas_dormidas}h"), unsafe_allow_html=True)
            with col4:
                st.markdown(create_metric_card("Tiempo p/Dormir", f"{tiempo_dormirse}min"), unsafe_allow_html=True)

            # Gr√°fico de gauge
            col1, col2 = st.columns(2)
            with col1:
                gauge_fig = create_gauge_chart(
                    porcentaje_calidad, 
                    "Calidad del Sue√±o (%)", 
                    100, 
                    MUPAI_COLORS['primary']
                )
                st.plotly_chart(gauge_fig, use_container_width=True)

            with col2:
                # Gr√°fico de componentes
                componentes = ['Calidad Subjetiva', 'Latencia', 'Duraci√≥n', 'Eficiencia', 'Perturbaciones', 'Medicaci√≥n', 'Disfunci√≥n Diurna']
                valores_comp = [componente_1, componente_2, componente_3, 0, componente_4, componente_5, componente_6]
                
                fig_comp = px.bar(
                    x=componentes,
                    y=valores_comp,
                    title="Componentes PSQI",
                    color=valores_comp,
                    color_continuous_scale=['#FFCC00', '#FF8C00', '#FF6B00']
                )
                fig_comp.update_layout(
                    paper_bgcolor="rgba(0,0,0,0)",
                    plot_bgcolor="rgba(0,0,0,0)",
                    font_color=MUPAI_COLORS['secondary'],
                    showlegend=False
                )
                st.plotly_chart(fig_comp, use_container_width=True)

            # Interpretaci√≥n con colores
            if total_puntuacion <= 5:
                st.success("‚úÖ **EXCELENTE CALIDAD DE SUE√ëO**")
                st.markdown("Tu sue√±o es reparador y de alta calidad. ¬°Mant√©n estos h√°bitos!")
            elif total_puntuacion <= 10:
                st.warning("‚ö†Ô∏è **CALIDAD DE SUE√ëO MODERADA**")
                st.markdown("Hay √°reas de mejora. Considera optimizar tu rutina nocturna.")
            else:
                st.error("‚ùå **CALIDAD DE SUE√ëO DEFICIENTE**")
                st.markdown("Tu sue√±o necesita atenci√≥n inmediata. Considera consultar un especialista.")

        except Exception as e:
            st.error(f"Error en el an√°lisis: {e}")

def cuestionario_ipaq():
    """Cuestionario IPAQ con visualizaciones avanzadas"""
    st.markdown('<h1>üèÉ An√°lisis de Actividad F√≠sica - IPAQ</h1>', unsafe_allow_html=True)
    
    # Layout en columnas
    col1, col2 = st.columns([2, 1])
    
    with col2:
        st.markdown("### üéØ Objetivos Recomendados")
        st.info("""
        **OMS recomienda:**
        ‚Ä¢ 150-300 min/semana moderada
        ‚Ä¢ 75-150 min/semana vigorosa
        ‚Ä¢ 2+ d√≠as de fortalecimiento
        ‚Ä¢ Reducir sedentarismo
        """)

    with col1:
        # Actividades vigorosas
        with st.expander("üí™ Actividades Vigorosas", expanded=True):
            dias_vigorosa = st.slider("D√≠as por semana de actividad vigorosa", 0, 7, 0, key="dias_vigorosa")
            if dias_vigorosa > 0:
                subcol1, subcol2 = st.columns(2)
                with subcol1:
                    tiempo_vigorosa_horas = st.number_input("Horas por d√≠a", 0, 10, 0, key="horas_vigorosa")
                with subcol2:
                    tiempo_vigorosa_minutos = st.number_input("Minutos adicionales", 0, 59, 0, key="minutos_vigorosa")
            else:
                tiempo_vigorosa_horas = tiempo_vigorosa_minutos = 0

        # Actividades moderadas
        with st.expander("üö¥ Actividades Moderadas", expanded=True):
            dias_moderada = st.slider("D√≠as por semana de actividad moderada", 0, 7, 0, key="dias_moderada")
            if dias_moderada > 0:
                subcol1, subcol2 = st.columns(2)
                with subcol1:
                    tiempo_moderada_horas = st.number_input("Horas por d√≠a", 0, 10, 0, key="horas_moderada")
                with subcol2:
                    tiempo_moderada_minutos = st.number_input("Minutos adicionales", 0, 59, 0, key="minutos_moderada")
            else:
                tiempo_moderada_horas = tiempo_moderada_minutos = 0

        # Caminata
        with st.expander("üö∂ Caminata", expanded=True):
            dias_caminata = st.slider("D√≠as por semana de caminata", 0, 7, 0, key="dias_caminata")
            if dias_caminata > 0:
                subcol1, subcol2 = st.columns(2)
                with subcol1:
                    tiempo_caminata_horas = st.number_input("Horas por d√≠a", 0, 10, 0, key="horas_caminata")
                with subcol2:
                    tiempo_caminata_minutos = st.number_input("Minutos adicionales", 0, 59, 0, key="minutos_caminata")
            else:
                tiempo_caminata_horas = tiempo_caminata_minutos = 0

        # Sedentarismo
        with st.expander("ü™ë Tiempo Sedentario"):
            subcol1, subcol2 = st.columns(2)
            with subcol1:
                tiempo_sedentario_horas = st.slider("Horas sentado/d√≠a", 0, 24, 8, key="horas_sedentario")
            with subcol2:
                tiempo_sedentario_minutos = st.slider("Minutos adicionales", 0, 59, 0, key="minutos_sedentario")

    if st.button("üìä Analizar Actividad F√≠sica", use_container_width=True, type="primary", key="calc_ipaq"):
        try:
            # C√°lculos
            total_vigorosa = dias_vigorosa * (tiempo_vigorosa_horas * 60 + tiempo_vigorosa_minutos)
            total_moderada = dias_moderada * (tiempo_moderada_horas * 60 + tiempo_moderada_minutos)
            total_caminata = dias_caminata * (tiempo_caminata_horas * 60 + tiempo_caminata_minutos)

            met_vigorosa = total_vigorosa * 8.0
            met_moderada = total_moderada * 4.0
            met_caminata = total_caminata * 3.3

            total_met = met_vigorosa + met_moderada + met_caminata
            tiempo_sedentario_total = tiempo_sedentario_horas * 60 + tiempo_sedentario_minutos

            st.markdown("---")
            st.markdown("## üìä An√°lisis Completo de Actividad F√≠sica")

            # M√©tricas principales
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.markdown(create_metric_card("MET-min/semana", f"{total_met:.0f}"), unsafe_allow_html=True)
            with col2:
                st.markdown(create_metric_card("Min Vigorosa/sem", f"{total_vigorosa:.0f}"), unsafe_allow_html=True)
            with col3:
                st.markdown(create_metric_card("Min Moderada/sem", f"{total_moderada:.0f}"), unsafe_allow_html=True)
            with col4:
                st.markdown(create_metric_card("Sedentario/d√≠a", f"{tiempo_sedentario_total:.0f}min"), unsafe_allow_html=True)

            # Gr√°ficos
            col1, col2 = st.columns(2)
            
            with col1:
                # Gauge de nivel de actividad
                if total_met >= 3000:
                    nivel_actividad = 100
                    color_gauge = MUPAI_COLORS['success']
                elif total_met >= 600:
                    nivel_actividad = 50 + (total_met - 600) * 50 / 2400
                    color_gauge = MUPAI_COLORS['warning']
                else:
                    nivel_actividad = total_met * 50 / 600
                    color_gauge = MUPAI_COLORS['danger']

                gauge_fig = create_gauge_chart(
                    nivel_actividad,
                    "Nivel de Actividad F√≠sica",
                    100,
                    color_gauge
                )
                st.plotly_chart(gauge_fig, use_container_width=True)

            with col2:
                # Gr√°fico de distribuci√≥n de actividades
                actividades = ['Vigorosa', 'Moderada', 'Caminata']
                minutos = [total_vigorosa, total_moderada, total_caminata]
                
                fig_pie = px.pie(
                    values=minutos,
                    names=actividades,
                    title="Distribuci√≥n de Actividades (min/semana)",
                    color_discrete_sequence=[MUPAI_COLORS['primary'], '#FFD633', '#FFE066']
                )
                fig_pie.update_layout(
                    paper_bgcolor="rgba(0,0,0,0)",
                    font_color=MUPAI_COLORS['secondary']
                )
                st.plotly_chart(fig_pie, use_container_width=True)

            # Clasificaci√≥n y recomendaciones
            if total_met >= 3000:
                st.success("üèÜ **NIVEL DE ACTIVIDAD: ALTO**")
                st.markdown("¬°Excelente! Superas ampliamente las recomendaciones. Mant√©n este nivel.")
                recomendaciones = [
                    "Contin√∫a con tu rutina actual",
                    "Var√≠a los tipos de ejercicio",
                    "Incluye ejercicios de flexibilidad",
                    "Mant√©n el equilibrio trabajo-descanso"
                ]
            elif total_met >= 600:
                st.info("üìà **NIVEL DE ACTIVIDAD: MODERADO**")
                st.markdown("Buen nivel base. Puedes optimizar para obtener mayores beneficios.")
                recomendaciones = [
                    "Aumenta gradualmente la intensidad",
                    "A√±ade 1-2 d√≠as m√°s de actividad vigorosa",
                    "Combina ejercicios de fuerza con cardio",
                    "Reduce el tiempo sedentario"
                ]
            else:
                st.warning("üìâ **NIVEL DE ACTIVIDAD: BAJO**")
                st.markdown("Es importante incrementar tu actividad f√≠sica para mejorar tu salud.")
                recomendaciones = [
                    "Comienza con caminatas de 10-15 min diarios",
                    "Usa escaleras en lugar de ascensor",
                    "Realiza pausas activas cada hora",
                    "Busca actividades que disfrutes"
                ]

            # Panel de recomendaciones
            st.markdown("### üí° Recomendaciones Personalizadas")
            for i, rec in enumerate(recomendaciones, 1):
                st.markdown(f"**{i}.** {rec}")

        except Exception as e:
            st.error(f"Error en el an√°lisis: {e}")

def cuestionario_habitos_alimenticios():
    """Cuestionario de h√°bitos alimenticios con an√°lisis nutricional"""
    st.markdown('<h1>üçé An√°lisis de H√°bitos Alimenticios</h1>', unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])
    
    with col2:
        st.markdown("### ü•ó Gu√≠a Nutricional")
        st.success("""
        **Alimentaci√≥n Saludable:**
        ‚Ä¢ 5 porciones frutas/verduras
        ‚Ä¢ Granos integrales
        ‚Ä¢ Prote√≠nas magras
        ‚Ä¢ Grasas saludables
        ‚Ä¢ 1.5-2L agua/d√≠a
        """)

    with col1:
        # Secci√≥n 1: Alimentos Frescos
        with st.expander("ü•¶ Consumo de Alimentos Frescos", expanded=True):
            opciones = ["Nunca", "Algunas veces", "Casi siempre", "Siempre"]
            
            agua = st.select_slider("Agua natural (1.5L+ diario)", opciones, key="agua")
            verduras = st.select_slider("Verduras frescas (200g+ diario)", opciones, key="verduras")
            frutas = st.select_slider("Frutas (200g+ diario)", opciones, key="frutas")
            leguminosas = st.select_slider("Leguminosas (300g+ semanal)", opciones, key="leguminosas")
            frutos_secos = st.select_slider("Frutos secos/aguacate (30g+ diario)", opciones, key="frutos_secos")

        # Secci√≥n 2: Prote√≠nas
        with st.expander("üçó Fuentes de Prote√≠na"):
            carne_fresca = st.selectbox(
                "Tipo de carne m√°s frecuente",
                ["Pescado fresco", "Pollo fresco", "Carne roja fresca", "No consumo carne fresca"],
                key="carne_fresca"
            )
            carnes_procesadas = st.select_slider(
                "Carnes procesadas (embutidos, enlatadas)",
                opciones,
                key="carnes_procesadas"
            )

        # Secci√≥n 3: H√°bitos Generales
        with st.expander("üçΩÔ∏è Patrones Alimentarios"):
            alimentos_fuera = st.select_slider("Comida no preparada en casa (3+ veces/semana)", opciones, key="alimentos_fuera")
            bebidas_azucaradas = st.select_slider("Bebidas azucaradas", ["Nunca", "1‚Äì3 veces/semana", "4‚Äì6 veces/semana", "Diario"], key="bebidas_azucaradas")
            postres_dulces = st.select_slider("Postres/dulces (2+ veces/semana)", opciones, key="postres_dulces")
            alimentos_procesados = st.select_slider("Alimentos ultraprocesados (2+ veces/semana)", opciones, key="alimentos_procesados")
            
            cereales = st.selectbox(
                "Tipo de cereales m√°s frecuente",
                ["Granos integrales", "Granos m√≠nimamente procesados", "Granos procesados/ultraprocesados"],
                key="cereales"
            )

        # Secci√≥n 4: Alcohol
        with st.expander("üç∑ Consumo de Alcohol"):
            alcohol = st.select_slider(
                "Alcohol (>2 bebidas/d√≠a hombres, >1 bebida/d√≠a mujeres)",
                opciones,
                key="alcohol"
            )

    if st.button("üìä Analizar H√°bitos Alimenticios", use_container_width=True, type="primary", key="calc_alimentacion"):
        try:
            # Sistema de puntuaci√≥n
            puntuaciones = {"Nunca": 1, "Algunas veces": 2, "Casi siempre": 3, "Siempre": 4}
            bebidas_puntuacion = {"Nunca": 4, "1‚Äì3 veces/semana": 3, "4‚Äì6 veces/semana": 2, "Diario": 1}
            carne_fresca_valores = {"Pescado fresco": 4, "Pollo fresco": 3, "Carne roja fresca": 2, "No consumo carne fresca": 1}
            carnes_procesadas_valores = {"Nunca": 4, "Algunas veces": 3, "Casi siempre": 2, "Siempre": 1}
            cereales_valores = {"Granos integrales": 4, "Granos m√≠nimamente procesados": 3, "Granos procesados/ultraprocesados": 1}

            # C√°lculos por categor√≠as
            alimentos_frescos = (
                puntuaciones[agua] + puntuaciones[verduras] + puntuaciones[frutas] + 
                puntuaciones[leguminosas] + puntuaciones[frutos_secos]
            ) / 5 * 25  # Convertir a porcentaje

            proteinas = (carne_fresca_valores[carne_fresca] + carnes_procesadas_valores[carnes_procesadas]) / 8 * 100

            habitos_generales = (
                (5 - puntuaciones[alimentos_fuera]) + bebidas_puntuacion[bebidas_azucaradas] + 
                (5 - puntuaciones[postres_dulces]) + (5 - puntuaciones[alimentos_procesados]) + 
                cereales_valores[cereales]
            ) / 20 * 100

            consumo_alcohol = (5 - puntuaciones[alcohol]) / 4 * 100

            puntuacion_total = (alimentos_frescos + proteinas + habitos_generales + consumo_alcohol) / 4

            st.markdown("---")
            st.markdown("## üìä An√°lisis Nutricional Completo")

            # M√©tricas principales
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.markdown(create_metric_card("Puntuaci√≥n Total", f"{puntuacion_total:.0f}%"), unsafe_allow_html=True)
            with col2:
                st.markdown(create_metric_card("Alimentos Frescos", f"{alimentos_frescos:.0f}%"), unsafe_allow_html=True)
            with col3:
                st.markdown(create_metric_card("Calidad Prote√≠nas", f"{proteinas:.0f}%"), unsafe_allow_html=True)
            with col4:
                st.markdown(create_metric_card("H√°bitos Generales", f"{habitos_generales:.0f}%"), unsafe_allow_html=True)

            # Gr√°ficos
            col1, col2 = st.columns(2)

            with col1:
                # Gr√°fico radar
                categorias = ['Alimentos Frescos', 'Prote√≠nas', 'H√°bitos Generales', 'Alcohol']
                valores = [alimentos_frescos, proteinas, habitos_generales, consumo_alcohol]
                
                radar_fig = create_radar_chart(categorias, valores, "Perfil Nutricional")
                st.plotly_chart(radar_fig, use_container_width=True)

            with col2:
                # Gauge principal
                if puntuacion_total >= 80:
                    color_gauge = MUPAI_COLORS['success']
                elif puntuacion_total >= 60:
                    color_gauge = MUPAI_COLORS['warning']
                else:
                    color_gauge = MUPAI_COLORS['danger']

                gauge_fig = create_gauge_chart(
                    puntuacion_total,
                    "Calidad Nutricional (%)",
                    100,
                    color_gauge
                )
                st.plotly_chart(gauge_fig, use_container_width=True)

            # Interpretaci√≥n y recomendaciones
            if puntuacion_total >= 80:
                st.success("‚úÖ **H√ÅBITOS ALIMENTICIOS EXCELENTES**")
                st.markdown("¬°Felicidades! Tu alimentaci√≥n es muy saludable. Mant√©n estos h√°bitos.")
            elif puntuacion_total >= 60:
                st.warning("‚ö†Ô∏è **H√ÅBITOS ALIMENTICIOS MODERADOS**")
                st.markdown("Tienes una base s√≥lida, pero hay √°reas importantes que mejorar.")
            else:
                st.error("‚ùå **H√ÅBITOS ALIMENTICIOS NECESITAN MEJORA**")
                st.markdown("Es crucial hacer cambios significativos en tu alimentaci√≥n.")

        except Exception as e:
            st.error(f"Error en el an√°lisis: {e}")

def cuestionario_estres():
    """Cuestionario de estr√©s percibido con an√°lisis psicol√≥gico"""
    st.markdown('<h1>üò∞ Evaluaci√≥n del Estr√©s Percibido</h1>', unsafe_allow_html=True)
    st.markdown("### Escala de Estr√©s Percibido (PSS-10)")
    
    col1, col2 = st.columns([2, 1])
    
    with col2:
        st.markdown("### üßò Manejo del Estr√©s")
        st.info("""
        **T√©cnicas efectivas:**
        ‚Ä¢ Respiraci√≥n profunda
        ‚Ä¢ Ejercicio regular
        ‚Ä¢ Meditaci√≥n/Mindfulness
        ‚Ä¢ Tiempo en naturaleza
        ‚Ä¢ Sue√±o adecuado
        ‚Ä¢ Apoyo social
        """)

    with col1:
        opciones = ["Nunca", "Casi nunca", "A veces", "Bastante seguido", "Muy seguido"]
        
        with st.expander("üß† Cuestionario de Estr√©s (√öltimo Mes)", expanded=True):
            preguntas_estres = [
                ("Molesto por algo inesperado", "stress_q1"),
                ("No puedes controlar cosas importantes", "stress_q2"),
                ("Nerviosismo o estr√©s", "stress_q3"),
                ("Confianza para manejar problemas", "stress_q4"),  # Inversa
                ("Las cosas van bien", "stress_q5"),  # Inversa
                ("No puedes lidiar con todo", "stress_q6"),
                ("Controlas las irritaciones", "stress_q7"),  # Inversa
                ("Tienes el control", "stress_q8"),  # Inversa
                ("Enojado por cosas fuera de control", "stress_q9"),
                ("Dificultades se acumulan", "stress_q10")
            ]
            
            respuestas = {}
            for i, (pregunta, key) in enumerate(preguntas_estres, 1):
                respuestas[key] = st.select_slider(
                    f"{i}. {pregunta}",
                    opciones,
                    key=key
                )

    if st.button("üìä Analizar Nivel de Estr√©s", use_container_width=True, type="primary", key="calc_stress"):
        try:
            scores = {"Nunca": 0, "Casi nunca": 1, "A veces": 2, "Bastante seguido": 3, "Muy seguido": 4}
            
            # Preguntas inversas (4, 5, 7, 8)
            preguntas_inversas = ["stress_q4", "stress_q5", "stress_q7", "stress_q8"]
            
            total_score = 0
            
            for key, respuesta in respuestas.items():
                if key in preguntas_inversas:
                    score = 4 - scores[respuesta]  # Invertir puntuaci√≥n
                else:
                    score = scores[respuesta]
                total_score += score

            porcentaje_estres = (total_score / 40) * 100

            st.markdown("---")
            st.markdown("## üìä An√°lisis de Estr√©s Percibido")

            # M√©tricas principales
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.markdown(create_metric_card("Puntuaci√≥n PSS", f"{total_score}/40"), unsafe_allow_html=True)
            with col2:
                st.markdown(create_metric_card("Nivel de Estr√©s", f"{porcentaje_estres:.0f}%"), unsafe_allow_html=True)
            with col3:
                if total_score <= 13:
                    categoria = "BAJO"
                    color_cat = MUPAI_COLORS['success']
                elif total_score <= 26:
                    categoria = "MODERADO"
                    color_cat = MUPAI_COLORS['warning']
                else:
                    categoria = "ALTO"
                    color_cat = MUPAI_COLORS['danger']
                st.markdown(create_metric_card("Categor√≠a", categoria), unsafe_allow_html=True)
            with col4:
                riesgo = "Bajo" if total_score <= 13 else ("Medio" if total_score <= 26 else "Alto")
                st.markdown(create_metric_card("Riesgo", riesgo), unsafe_allow_html=True)

            # Gr√°fico de gauge
            gauge_fig = create_gauge_chart(
                porcentaje_estres,
                "Nivel de Estr√©s (%)",
                100,
                color_cat
            )
            st.plotly_chart(gauge_fig, use_container_width=True)

            # Interpretaci√≥n
            if total_score <= 13:
                st.success("‚úÖ **ESTR√âS BAJO - EXCELENTE MANEJO**")
                st.markdown("Tienes un buen control del estr√©s. Mant√©n tus estrategias actuales.")
            elif total_score <= 26:
                st.warning("‚ö†Ô∏è **ESTR√âS MODERADO - REQUIERE ATENCI√ìN**")
                st.markdown("Nivel de estr√©s manejable pero con margen de mejora.")
            else:
                st.error("‚ùå **ESTR√âS ALTO - INTERVENCI√ìN NECESARIA**")
                st.markdown("Nivel de estr√©s que requiere atenci√≥n profesional inmediata.")

        except Exception as e:
            st.error(f"Error en el an√°lisis: {e}")

# ---- BARRA LATERAL PROFESIONAL ----
with st.sidebar:
    # Logo
    safe_image("LOGO.png", fallback_text="MUPAI Logo")
    
    sidebar_header = f"""
    <div style="text-align: center; padding: 1rem; background: linear-gradient(90deg, {MUPAI_COLORS['primary']} 0%, #E6B800 100%); border-radius: 12px; margin: 1rem 0;">
        <h2 style="color: {MUPAI_COLORS['secondary']}; margin: 0;">MUPAI</h2>
        <p style="color: {MUPAI_COLORS['secondary']}; margin: 0; font-weight: 600;">Entrenamiento Digital Cient√≠fico</p>
    </div>
    """
    st.markdown(sidebar_header, unsafe_allow_html=True)
    
    menu = st.selectbox(
        "üöÄ Navegaci√≥n Principal",
        ["üè† Inicio", "üë§ Sobre M√≠", "üíº Servicios", "üìû Contacto", "üìä Evaluaci√≥n Integral"],
        index=0,
        key="menu_principal"
    )
    
    st.markdown("---")
    
    # Informaci√≥n de contacto en sidebar
    st.markdown("### üì± Contacto R√°pido")
    st.markdown("üìß contacto@mupai.com")
    st.markdown("üìû +52 866 258 05 94")
    
    st.markdown("---")
    footer_sidebar = f"""
    <div style="text-align: center; color: {MUPAI_COLORS['dark_gray']}; font-size: 0.8rem;">
        ¬© 2024 MUPAI<br>
        Todos los derechos reservados
    </div>
    """
    st.markdown(footer_sidebar, unsafe_allow_html=True)

# ---- CONTENIDO PRINCIPAL ----
if menu == "üè† Inicio":
    # Hero Section
    safe_image("LOGO.png", fallback_text="MUPAI - Logo Principal")
    
    hero_section = f"""
    <div style="text-align: center; padding: 3rem 0;">
        <h1 style="font-size: 3rem; color: {MUPAI_COLORS['secondary']}; margin-bottom: 1rem;">
            Bienvenido a MUPAI
        </h1>
        <h3 style="color: {MUPAI_COLORS['dark_gray']}; font-weight: 400;">
            Entrenamiento Digital Basado en Ciencia del Ejercicio
        </h3>
    </div>
    """
    st.markdown(hero_section, unsafe_allow_html=True)
    
    # M√©tricas destacadas
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.markdown(create_metric_card("A√±os de Experiencia", "5+"), unsafe_allow_html=True)
    with col2:
        st.markdown(create_metric_card("Clientes Satisfechos", "200+"), unsafe_allow_html=True)
    with col3:
        st.markdown(create_metric_card("Programas Creados", "50+"), unsafe_allow_html=True)
    with col4:
        st.markdown(create_metric_card("Certificaciones", "10+"), unsafe_allow_html=True)

    st.markdown("---")

    # Secciones informativas
    col1, col2 = st.columns(2)
    
    with col1:
        mission_card = """
        <div class="service-card">
            <h2>üéØ Nuestra Misi√≥n</h2>
            <p>Hacer accesible el entrenamiento basado en ciencia, proporcionando planes completamente personalizados 
            a trav√©s de herramientas digitales respaldadas por inteligencia artificial, datos precisos y metodolog√≠as 
            validadas cient√≠ficamente.</p>
        </div>
        """
        st.markdown(mission_card, unsafe_allow_html=True)
        
        policy_card = """
        <div class="service-card">
            <h2>üìã Nuestra Pol√≠tica</h2>
            <p>En <strong>MUPAI</strong>, nuestra pol√≠tica est√° fundamentada en el compromiso con la excelencia, 
            la √©tica y el servicio centrado en el usuario. Actuamos con responsabilidad y transparencia para 
            ofrecer soluciones de entrenamiento que transformen positivamente la vida de nuestros usuarios.</p>
        </div>
        """
        st.markdown(policy_card, unsafe_allow_html=True)

    with col2:
        vision_card = """
        <div class="service-card">
            <h2>üîÆ Nuestra Visi√≥n</h2>
            <p>Convertirnos en uno de los m√°ximos referentes a nivel global en entrenamiento digital personalizado, 
            aprovechando las nuevas tecnolog√≠as para hacer m√°s accesible el fitness basado en ciencia para todas 
            las personas, sin importar su ubicaci√≥n o nivel de experiencia.</p>
        </div>
        """
        st.markdown(vision_card, unsafe_allow_html=True)
        
        values_card = """
        <div class="service-card">
            <h2>ü§ù Valores Fundamentales</h2>
            <ul>
                <li><strong>Personalizaci√≥n Cient√≠fica</strong>: Datos confiables y ciencia del ejercicio</li>
                <li><strong>Tecnolog√≠a Accesible</strong>: Servicio adaptable a cada usuario</li>
                <li><strong>Privacidad y Seguridad</strong>: Protecci√≥n de datos personales</li>
                <li><strong>Innovaci√≥n Continua</strong>: Mejora constante de la experiencia</li>
                <li><strong>Excelencia y Respeto</strong>: Promovemos el esfuerzo y la constancia</li>
            </ul>
        </div>
        """
        st.markdown(values_card, unsafe_allow_html=True)

elif menu == "üë§ Sobre M√≠":
    st.markdown('<h1>üë§ Erick Francisco De Luna Hern√°ndez</h1>', unsafe_allow_html=True)
    st.markdown("### Especialista en Ciencias del Ejercicio y Entrenamiento Digital")
    
    # Informaci√≥n profesional con dise√±o mejorado
    col1, col2 = st.columns([2, 1])
    
    with col1:
        academic_card = """
        <div class="service-card">
            <h2>üéì Formaci√≥n Acad√©mica de Excelencia</h2>
            <ul>
                <li><strong>Maestr√≠a en Fuerza y Acondicionamiento</strong><br>
                    <em>Football Science Institute</em></li>
                <li><strong>Licenciatura en Ciencias del Ejercicio</strong><br>
                    <em>Universidad Aut√≥noma de Nuevo Le√≥n (UANL)</em></li>
                <li><strong>Certificaciones Especializadas</strong><br>
                    <em>Metodolog√≠as avanzadas de entrenamiento</em></li>
            </ul>
        </div>
        """
        st.markdown(academic_card, unsafe_allow_html=True)

        achievements_card = """
        <div class="service-card">
            <h2>üèÜ Reconocimientos y Logros</h2>
            <ul>
                <li>ü•á <strong>Premio al M√©rito Acad√©mico de la UANL</strong></li>
                <li>üèÖ <strong>Primer Lugar de Generaci√≥n</strong> - Facultad de Organizaci√≥n Deportiva</li>
                <li>üéñÔ∏è <strong>Beca de Excelencia Acad√©mica</strong> por desempe√±o sobresaliente</li>
                <li>üìö <strong>Investigaci√≥n Aplicada</strong> en metodolog√≠as de entrenamiento</li>
            </ul>
        </div>
        """
        st.markdown(achievements_card, unsafe_allow_html=True)

        philosophy_card = """
        <div class="service-card">
            <h2>üí° Filosof√≠a Profesional</h2>
            <p>Mi enfoque combina <strong>preparaci√≥n acad√©mica rigurosa</strong>, <strong>experiencia pr√°ctica</strong> 
            y un <strong>enfoque basado en evidencia cient√≠fica</strong>. Me dedico a dise√±ar soluciones que transformen 
            el rendimiento f√≠sico y promuevan un estilo de vida saludable y sostenible para cada individuo.</p>
            
            <p>Creo firmemente en la <strong>personalizaci√≥n</strong> como clave del √©xito, utilizando tecnolog√≠a 
            avanzada para hacer accesible el entrenamiento cient√≠fico a personas de todos los niveles.</p>
        </div>
        """
        st.markdown(philosophy_card, unsafe_allow_html=True)

    with col2:
        # M√©tricas profesionales
        st.markdown(create_metric_card("A√±os de Experiencia", "5+"), unsafe_allow_html=True)
        st.markdown(create_metric_card("Programas Dise√±ados", "50+"), unsafe_allow_html=True)
        st.markdown(create_metric_card("Certificaciones", "10+"), unsafe_allow_html=True)
        st.markdown(create_metric_card("Clientes Atendidos", "200+"), unsafe_allow_html=True)

        st.markdown("### üåü Especialidades")
        st.info("""
        **√Åreas de Expertise:**
        ‚Ä¢ Periodizaci√≥n del entrenamiento
        ‚Ä¢ An√°lisis biomec√°nico
        ‚Ä¢ Composici√≥n corporal
        ‚Ä¢ Prevenci√≥n de lesiones
        ‚Ä¢ Entrenamiento funcional
        ‚Ä¢ Tecnolog√≠a deportiva
        """)

    # Galer√≠a profesional
    st.markdown("---")
    st.markdown("## üì∏ Galer√≠a Profesional")
    
    col1, col2, col3 = st.columns(3)
    images = [
        ("FB_IMG_1734820693317.jpg", "Entrenamiento Funcional"),
        ("FB_IMG_1734820709707.jpg", "Evaluaci√≥n Biomec√°nica"),
        ("FB_IMG_1734820712642.jpg", "An√°lisis de Rendimiento"),
        ("FB_IMG_1734820729323.jpg", "Sesi√≥n de Coaching"),
        ("FB_IMG_1734820808186.jpg", "Conferencia Cient√≠fica")
    ]
    
    for i, (img, caption) in enumerate(images):
        with [col1, col2, col3][i % 3]:
            safe_image(img, caption)

elif menu == "üíº Servicios":
    st.markdown('<h1>üíº Servicios Profesionales MUPAI</h1>', unsafe_allow_html=True)
    st.markdown("### Soluciones Integrales de Entrenamiento Basado en Ciencia")
    
    # Servicios principales
    services = [
        {
            "icon": "üèãÔ∏è",
            "title": "Entrenamiento Personalizado",
            "description": "Planes de entrenamiento individualizados basados en an√°lisis cient√≠fico completo",
            "features": ["Periodizaci√≥n cient√≠fica", "Seguimiento de progreso", "Adaptaci√≥n continua", "An√°lisis biomec√°nico"]
        },
        {
            "icon": "üß†",
            "title": "Consultor√≠a en Rendimiento",
            "description": "Optimizaci√≥n del rendimiento deportivo mediante an√°lisis avanzado",
            "features": ["Evaluaci√≥n funcional", "An√°lisis de movimiento", "Prevenci√≥n de lesiones", "Optimizaci√≥n t√©cnica"]
        },
        {
            "icon": "üí™",
            "title": "Programas de Transformaci√≥n",
            "description": "Desarrollo integral de fuerza, resistencia y composici√≥n corporal",
            "features": ["Desarrollo muscular", "P√©rdida de grasa", "Mejora cardiovascular", "Rehabilitaci√≥n funcional"]
        },
        {
            "icon": "ü•ó",
            "title": "Asesor√≠a Nutricional Deportiva",
            "description": "Planes alimentarios especializados para optimizar el rendimiento",
            "features": ["Nutrici√≥n personalizada", "Timing nutricional", "Suplementaci√≥n", "Hidrataci√≥n √≥ptima"]
        },
        {
            "icon": "üìä",
            "title": "An√°lisis y Monitoreo",
            "description": "Evaluaci√≥n integral del estilo de vida y seguimiento de resultados",
            "features": ["Evaluaciones PSQI, IPAQ", "Monitoreo de progreso", "An√°lisis de datos", "Reportes detallados"]
        },
        {
            "icon": "üéØ",
            "title": "Coaching Digital",
            "description": "Acompa√±amiento profesional a trav√©s de plataformas tecnol√≥gicas",
            "features": ["Sesiones virtuales", "Retroalimentaci√≥n continua", "Ajustes en tiempo real", "Soporte 24/7"]
        }
    ]
    
    # Mostrar servicios en grid
    for i in range(0, len(services), 2):
        col1, col2 = st.columns(2)
        
        with col1:
            service = services[i]
            service_card = f"""
            <div class="service-card">
                <h2>{service['icon']} {service['title']}</h2>
                <p>{service['description']}</p>
                <h4>‚ú® Caracter√≠sticas:</h4>
                <ul>
                    {''.join([f'<li>{feature}</li>' for feature in service['features']])}
                </ul>
            </div>
            """
            st.markdown(service_card, unsafe_allow_html=True)
        
        if i + 1 < len(services):
            with col2:
                service = services[i + 1]
                service_card = f"""
                <div class="service-card">
                    <h2>{service['icon']} {service['title']}</h2>
                    <p>{service['description']}</p>
                    <h4>‚ú® Caracter√≠sticas:</h4>
                    <ul>
                        {''.join([f'<li>{feature}</li>' for feature in service['features']])}
                    </ul>
                </div>
                """
                st.markdown(service_card, unsafe_allow_html=True)

elif menu == "üìû Contacto":
    st.markdown('<h1>üìû Informaci√≥n de Contacto</h1>', unsafe_allow_html=True
