"""
MUPAI - Implementaci√≥n Completa de L√≥gica Cient√≠fica
Todas las funciones implementadas EXACTAMENTE seg√∫n documentaci√≥n
Sin simplificaciones, mantiene todos los rangos, clasificaciones y validaciones
"""

import numpy as np
from typing import Dict, Tuple, Union, Optional

# ==================== 1. AJUSTE DE GRASA CORPORAL - EXACTO ====================

def ajustar_grasa_corporal(porcentaje_grasa: float, metodo_medicion: str, pliegues: Optional[int] = None) -> float:
    """
    Implementa EXACTAMENTE los ajustes de grasa corporal seg√∫n documentaci√≥n
    
    BIA:
    - Si %BF < 18% ‚Üí ajustar ‚àí2.5 puntos porcentuales
    - Si %BF > 25% ‚Üí ajustar +3.5 puntos porcentuales
    - Si %BF entre 18‚Äì25% ‚Üí sin ajuste
    
    Naval:
    - Si %BF < 15% ‚Üí ajustar ‚àí2.5 puntos porcentuales
    - Si %BF > 25% ‚Üí ajustar +3.0 puntos porcentuales
    - Si %BF entre 15‚Äì25% ‚Üí sin ajuste
    
    Antropometr√≠a:
    - Si < 7 pliegues ‚Üí ajustar +1.5 puntos porcentuales
    - Si ‚â• 7 pliegues ‚Üí sin ajuste
    
    DEXA: Sin ajuste
    """
    if metodo_medicion == "DEXA":
        return porcentaje_grasa
    
    elif metodo_medicion == "BIA":
        if porcentaje_grasa < 18:
            return porcentaje_grasa - 2.5
        elif porcentaje_grasa > 25:
            return porcentaje_grasa + 3.5
        else:  # 18-25%
            return porcentaje_grasa
    
    elif metodo_medicion == "F√≥rmula Naval":
        if porcentaje_grasa < 15:
            return porcentaje_grasa - 2.5
        elif porcentaje_grasa > 25:
            return porcentaje_grasa + 3.0
        else:  # 15-25%
            return porcentaje_grasa
    
    elif metodo_medicion == "Antropometr√≠a":
        if pliegues is None:
            raise ValueError("N√∫mero de pliegues requerido para m√©todo Antropometr√≠a")
        
        if pliegues < 7:
            return porcentaje_grasa + 1.5
        else:  # ‚â• 7 pliegues
            return porcentaje_grasa
    
    else:
        raise ValueError(f"M√©todo de medici√≥n no reconocido: {metodo_medicion}")


# ==================== 2. FACTORES DE ACTIVIDAD - EXACTOS ====================

def calcular_geaf(nivel_actividad: str, sexo: str) -> float:
    """
    Implementa EXACTAMENTE los factores GEAF seg√∫n tabla por g√©nero
    """
    factores_geaf = {
        "Sedentario": {"Masculino": 1.00, "Femenino": 1.00},
        "Poco activo": {"Masculino": 1.11, "Femenino": 1.12},
        "Activo": {"Masculino": 1.25, "Femenino": 1.27},
        "Muy activo": {"Masculino": 1.48, "Femenino": 1.45}
    }
    
    try:
        return factores_geaf[nivel_actividad][sexo]
    except KeyError:
        raise ValueError(f"Nivel de actividad '{nivel_actividad}' o sexo '{sexo}' no v√°lido")


# ==================== 3. EVALUACI√ìN PITTSBURGH - EXACTA ====================

def evaluar_pittsburgh(dificultad_dormir: int, despertares: int, sensacion_descanso: int, calidad_percibida: int) -> Dict:
    """
    Implementa EXACTAMENTE la evaluaci√≥n Pittsburgh 0-16 puntos
    
    Cada pregunta: 0-4 puntos
    √çtem 3 INVERTIDO: (4 - valor_ingresado)
    
    F√≥rmula: Q1 + Q2 + (4-Q3) + Q4
    Rango total: 0-16 puntos
    
    Clasificaci√≥n:
    - 0‚Äì5 ‚Üí Sue√±o bueno
    - 6‚Äì9 ‚Üí Sue√±o moderadamente alterado
    - 10‚Äì16 ‚Üí Sue√±o deficiente
    """
    # Validar rangos
    for valor in [dificultad_dormir, despertares, sensacion_descanso, calidad_percibida]:
        if not 0 <= valor <= 4:
            raise ValueError("Todos los valores deben estar entre 0 y 4")
    
    # Calcular score (item 3 invertido)
    score = dificultad_dormir + despertares + (4 - sensacion_descanso) + calidad_percibida
    
    # Validar rango final
    if not 0 <= score <= 16:
        raise ValueError(f"Score calculado fuera de rango: {score}")
    
    # Clasificaci√≥n
    if score <= 5:
        clasificacion = "Sue√±o bueno"
    elif score <= 9:
        clasificacion = "Sue√±o moderadamente alterado"
    else:  # 10-16
        clasificacion = "Sue√±o deficiente"
    
    return {
        "score": score,
        "clasificacion": clasificacion,
        "rango": "0-16"
    }


# ==================== 4. EVALUACI√ìN PSS-4 - EXACTA ====================

def evaluar_pss4(control_vida: int, manejo_problemas: int, cosas_favor: int, dificultades: int) -> Dict:
    """
    Implementa EXACTAMENTE PSS-4 con √≠tems invertidos
    
    √çtems 2 y 3 INVERTIDOS: (4 - valor_ingresado)
    
    F√≥rmula: Q1 + (4-Q2) + (4-Q3) + Q4
    Rango: 0-16 puntos
    
    Clasificaci√≥n PSS-4:
    - 0-4: Estr√©s bajo
    - 5-8: Estr√©s moderado  
    - 9-12: Estr√©s alto
    - 13-16: Estr√©s muy alto
    """
    # Validar rangos
    for valor in [control_vida, manejo_problemas, cosas_favor, dificultades]:
        if not 0 <= valor <= 4:
            raise ValueError("Todos los valores deben estar entre 0 y 4")
    
    # Calcular score (√≠tems 2 y 3 invertidos)
    score = control_vida + (4 - manejo_problemas) + (4 - cosas_favor) + dificultades
    
    # Validar rango final
    if not 0 <= score <= 16:
        raise ValueError(f"Score calculado fuera de rango: {score}")
    
    # Clasificaci√≥n
    if score <= 4:
        clasificacion = "Estr√©s bajo"
    elif score <= 8:
        clasificacion = "Estr√©s moderado"
    elif score <= 12:
        clasificacion = "Estr√©s alto"
    else:  # 13-16
        clasificacion = "Estr√©s muy alto"
    
    return {
        "score": score,
        "clasificacion": clasificacion,
        "rango": "0-16"
    }


# ==================== 5. FACTOR DE RECUPERACI√ìN INTELIGENTE - EXACTO ====================

def calcular_fri(score_pittsburgh: int, score_pss4: int) -> Dict:
    """
    Implementa EXACTAMENTE el c√°lculo FRI seg√∫n tabla
    
    FRI = (20 - score_pittsburgh) + (20 - score_pss4)
    
    Clasificaci√≥n:
    - ‚â• 17: üü¢ Muy alto
    - 14‚Äì16: üü¢ Alto
    - 11‚Äì13: üü° Intermedio
    - 8‚Äì10: üü† Bajo
    - ‚â§ 7: üî¥ Muy bajo
    """
    # Validar rangos
    if not 0 <= score_pittsburgh <= 16:
        raise ValueError(f"Score Pittsburgh fuera de rango: {score_pittsburgh}")
    if not 0 <= score_pss4 <= 16:
        raise ValueError(f"Score PSS-4 fuera de rango: {score_pss4}")
    
    # Calcular FRI
    fri = (20 - score_pittsburgh) + (20 - score_pss4)
    
    # Clasificaci√≥n
    if fri >= 17:
        nivel = "üü¢ Muy alto"
    elif fri >= 14:
        nivel = "üü¢ Alto"
    elif fri >= 11:
        nivel = "üü° Intermedio"
    elif fri >= 8:
        nivel = "üü† Bajo"
    else:  # ‚â§ 7
        nivel = "üî¥ Muy bajo"
    
    return {
        "fri": fri,
        "nivel": nivel,
        "score_pittsburgh": score_pittsburgh,
        "score_pss4": score_pss4
    }


# ==================== 6. DETERMINACI√ìN AUTOM√ÅTICA DE OBJETIVO - EXACTA ====================

def determinar_objetivo_automatico(porcentaje_grasa: float, sexo: str, nivel_entrenamiento: str) -> Dict:
    """
    Implementa EXACTAMENTE la tabla de objetivos autom√°ticos
    
    HOMBRES:
    - > 26% ‚Üí Definici√≥n (cualquier nivel)
    - 21‚Äì26% ‚Üí Definici√≥n (Principiante‚ÄìIntermedio)
    - 15‚Äì21% ‚Üí Recomposici√≥n (Principiante‚ÄìIntermedio)
    - 8‚Äì15% ‚Üí Volumen moderado (Intermedio‚ÄìAvanzado)
    - ‚â§ 8% ‚Üí Volumen agresivo (Avanzado/Experto)
    
    MUJERES:
    - > 39% ‚Üí Definici√≥n (cualquier nivel)
    - 33‚Äì39% ‚Üí Definici√≥n (Principiante‚ÄìIntermedio)
    - 24‚Äì33% ‚Üí Recomposici√≥n (Principiante‚ÄìIntermedio)
    - 14‚Äì24% ‚Üí Volumen moderado (Intermedio‚ÄìAvanzado)
    - ‚â§ 14% ‚Üí Volumen agresivo (Avanzado/Experto)
    """
    if sexo == "Masculino":
        if porcentaje_grasa > 26:
            return {
                "objetivo": "Definici√≥n",
                "nivel_requerido": "Cualquier nivel",
                "razon": "BF > 26%"
            }
        elif 21 <= porcentaje_grasa <= 26:
            if nivel_entrenamiento in ["Principiante", "Intermedio"]:
                return {
                    "objetivo": "Definici√≥n",
                    "nivel_requerido": "Principiante‚ÄìIntermedio",
                    "razon": "BF 21-26%"
                }
            else:
                return {
                    "objetivo": "Recomposici√≥n",
                    "nivel_requerido": "Nivel avanzado detectado",
                    "razon": "BF 21-26% con nivel avanzado"
                }
        elif 15 <= porcentaje_grasa < 21:
            return {
                "objetivo": "Recomposici√≥n",
                "nivel_requerido": "Principiante‚ÄìIntermedio",
                "razon": "BF 15-21%"
            }
        elif 8 < porcentaje_grasa < 15:
            return {
                "objetivo": "Volumen moderado",
                "nivel_requerido": "Intermedio‚ÄìAvanzado",
                "razon": "BF 8-15%"
            }
        else:  # ‚â§ 8%
            return {
                "objetivo": "Volumen agresivo",
                "nivel_requerido": "Avanzado/Experto",
                "razon": "BF ‚â§ 8%"
            }
    
    else:  # Femenino
        if porcentaje_grasa > 39:
            return {
                "objetivo": "Definici√≥n",
                "nivel_requerido": "Cualquier nivel",
                "razon": "BF > 39%"
            }
        elif 33 <= porcentaje_grasa <= 39:
            if nivel_entrenamiento in ["Principiante", "Intermedio"]:
                return {
                    "objetivo": "Definici√≥n",
                    "nivel_requerido": "Principiante‚ÄìIntermedio",
                    "razon": "BF 33-39%"
                }
            else:
                return {
                    "objetivo": "Recomposici√≥n",
                    "nivel_requerido": "Nivel avanzado detectado",
                    "razon": "BF 33-39% con nivel avanzado"
                }
        elif 24 <= porcentaje_grasa < 33:
            return {
                "objetivo": "Recomposici√≥n",
                "nivel_requerido": "Principiante‚ÄìIntermedio",
                "razon": "BF 24-33%"
            }
        elif 14 < porcentaje_grasa < 24:
            return {
                "objetivo": "Volumen moderado",
                "nivel_requerido": "Intermedio‚ÄìAvanzado",
                "razon": "BF 14-24%"
            }
        else:  # ‚â§ 14%
            return {
                "objetivo": "Volumen agresivo",
                "nivel_requerido": "Avanzado/Experto",
                "razon": "BF ‚â§ 14%"
            }


# ==================== 7. D√âFICITS Y SUPER√ÅVITS - EXACTOS ====================

def obtener_deficit_ranges() -> Dict:
    """
    Implementa EXACTAMENTE los rangos de d√©ficit por categor√≠a
    """
    return {
        "Preparaci√≥n Concurso": {
            "rango": (0.025, 0.075),
            "perdida_max": 0.005,
            "descripcion": "D√©ficit muy conservador para mantener masa muscular"
        },
        "Atl√©tico": {
            "rango": (0.05, 0.25),
            "perdida_max": 0.007,
            "descripcion": "D√©ficit moderado para atletas"
        },
        "Promedio": {
            "rango": (0.20, 0.40),
            "perdida_max": 0.010,
            "descripcion": "D√©ficit est√°ndar para poblaci√≥n general"
        },
        "Sobrepeso": {
            "rango": (0.30, 0.50),
            "perdida_max": 0.015,
            "descripcion": "D√©ficit agresivo para sobrepeso"
        },
        "Obeso": {
            "rango": "PSMF",
            "perdida_max": "N/A",
            "descripcion": "Protein-Sparing Modified Fast requerido"
        }
    }


def obtener_superavit_ranges() -> Dict:
    """
    Implementa EXACTAMENTE los rangos de super√°vit por porcentaje BF
    """
    return {
        "< 12%": {
            "nivel": "Avanzado/Experto",
            "rango": (0.15, 0.20),
            "descripcion": "Super√°vit alto para BF muy bajo"
        },
        "12-15%": {
            "nivel": "Intermedio/Avanzado",
            "rango": (0.10, 0.15),
            "descripcion": "Super√°vit moderado para BF bajo"
        },
        "> 18%": {
            "nivel": "No recomendado",
            "rango": "Recomposici√≥n",
            "descripcion": "Recomposici√≥n recomendada en lugar de volumen"
        }
    }


# ==================== 8. MODULACI√ìN FRI - EXACTA ====================

def ajustar_por_fri(deficit_superavit_base: float, fri_nivel: str, objetivo: str) -> Dict:
    """
    Implementa EXACTAMENTE la modulaci√≥n por FRI
    
    - üî¥ Muy bajo: -50% del d√©ficit/super√°vit
    - üü† Bajo: -30%
    - üü° Intermedio: -10%
    - üü¢ Alto: 0% (sin ajuste)
    - üü¢ Muy alto: +5% (solo volumen agresivo)
    """
    # Determinar factor de ajuste
    if "üî¥ Muy bajo" in fri_nivel:
        factor_ajuste = -0.50
    elif "üü† Bajo" in fri_nivel:
        factor_ajuste = -0.30
    elif "üü° Intermedio" in fri_nivel:
        factor_ajuste = -0.10
    elif "üü¢ Alto" in fri_nivel:
        factor_ajuste = 0.0
    elif "üü¢ Muy alto" in fri_nivel:
        # Solo +5% para volumen agresivo
        factor_ajuste = 0.05 if "agresivo" in objetivo.lower() else 0.0
    else:
        factor_ajuste = 0.0
    
    # Aplicar ajuste
    ajuste_absoluto = deficit_superavit_base * factor_ajuste
    valor_ajustado = deficit_superavit_base + ajuste_absoluto
    
    return {
        "valor_original": deficit_superavit_base,
        "factor_ajuste": factor_ajuste,
        "ajuste_absoluto": ajuste_absoluto,
        "valor_ajustado": valor_ajustado,
        "fri_nivel": fri_nivel
    }


# ==================== 9. C√ÅLCULOS ENERG√âTICOS - EXACTOS ====================

def calcular_gasto_energetico_total(peso: float, estatura: float, porcentaje_grasa: float, 
                                   sexo: str, nivel_actividad: str, minutos_entrenamiento: int, 
                                   dias_entrenamiento: int) -> Dict:
    """
    Implementa EXACTAMENTE los c√°lculos energ√©ticos
    
    1. TMB (Katch-McArdle): TMB = 370 + (21.6 √ó Masa_Magra_kg)
    2. Masa_Magra = peso √ó (1 - porcentaje_grasa_corregido)
    3. GEAF seg√∫n tabla exacta por g√©nero
    4. GEE = 0.1 √ó peso √ó minutos_efectivos √ó d√≠as_semana
    5. GEE_diario = GEE_semanal √∑ 7
    6. GET = (TMB √ó GEAF + GEE_diario) √ó ETA(1.15)
    """
    # 1. Calcular masa magra
    masa_magra = peso * (1 - porcentaje_grasa / 100)
    
    # 2. TMB usando Katch-McArdle EXACTA
    tmb = 370 + (21.6 * masa_magra)
    
    # 3. GEAF seg√∫n tabla exacta
    geaf = calcular_geaf(nivel_actividad, sexo)
    
    # 4. GEE c√°lculo exacto
    gee_semanal = 0.1 * peso * minutos_entrenamiento * dias_entrenamiento
    gee_diario = gee_semanal / 7
    
    # 5. GET final con ETA exacto
    eta = 1.15
    get = (tmb * geaf + gee_diario) * eta
    
    return {
        "masa_magra": masa_magra,
        "tmb": tmb,
        "geaf": geaf,
        "gee_semanal": gee_semanal,
        "gee_diario": gee_diario,
        "eta": eta,
        "get": get,
        "detalles": {
            "formula_tmb": "370 + (21.6 √ó Masa_Magra_kg)",
            "formula_gee": "0.1 √ó peso √ó minutos √ó d√≠as",
            "formula_get": "(TMB √ó GEAF + GEE_diario) √ó ETA(1.15)"
        }
    }


# ==================== 10. MACRONUTRIENTES - EXACTOS ====================

def calcular_macronutrientes_avanzados(calorias_totales: float, peso: float, objetivo_automatico: str) -> Dict:
    """
    Implementa EXACTAMENTE los rangos de macronutrientes
    
    PROTE√çNA (g/kg):
    - D√©ficit: 2.2 ‚Äì 2.6 g/kg
    - Recomposici√≥n: 2.0 ‚Äì 2.3 g/kg
    - Super√°vit: 1.8 ‚Äì 2.0 g/kg
    
    GRASA (g/kg):
    - D√©ficit: 0.8 ‚Äì 1.0 g/kg
    - Recomposici√≥n: 0.9 ‚Äì 1.1 g/kg
    - Super√°vit: 1.0 ‚Äì 1.2 g/kg
    
    CARBOHIDRATOS: Por diferencia cal√≥rica
    """
    # Determinar rangos seg√∫n objetivo
    if "Definici√≥n" in objetivo_automatico:
        proteina_min, proteina_max = 2.2, 2.6
        grasa_min, grasa_max = 0.8, 1.0
    elif "Recomposici√≥n" in objetivo_automatico:
        proteina_min, proteina_max = 2.0, 2.3
        grasa_min, grasa_max = 0.9, 1.1
    else:  # Volumen
        proteina_min, proteina_max = 1.8, 2.0
        grasa_min, grasa_max = 1.0, 1.2
    
    # Calcular valores medios
    proteina_gkg = (proteina_min + proteina_max) / 2
    grasa_gkg = (grasa_min + grasa_max) / 2
    
    # Calcular gramos totales
    proteina_g = peso * proteina_gkg
    grasa_g = peso * grasa_gkg
    
    # Calcular calor√≠as de prote√≠na y grasa
    proteina_kcal = proteina_g * 4
    grasa_kcal = grasa_g * 9
    
    # Carbohidratos por diferencia
    carbs_kcal = calorias_totales - proteina_kcal - grasa_kcal
    carbs_g = carbs_kcal / 4
    
    return {
        "proteina": {
            "gramos": proteina_g,
            "kcal": proteina_kcal,
            "gkg": proteina_gkg,
            "rango_gkg": (proteina_min, proteina_max),
            "porcentaje": (proteina_kcal / calorias_totales) * 100
        },
        "grasa": {
            "gramos": grasa_g,
            "kcal": grasa_kcal,
            "gkg": grasa_gkg,
            "rango_gkg": (grasa_min, grasa_max),
            "porcentaje": (grasa_kcal / calorias_totales) * 100
        },
        "carbohidratos": {
            "gramos": carbs_g,
            "kcal": carbs_kcal,
            "gkg": carbs_g / peso,
            "porcentaje": (carbs_kcal / calorias_totales) * 100
        },
        "total_kcal": calorias_totales,
        "objetivo": objetivo_automatico
    }


# ==================== 11. VALIDACIONES CRUZADAS - TODAS ====================

def validar_actividad_ocupacion(nivel_actividad: str, ocupacion: str) -> Dict:
    """
    Implementa validaci√≥n cruzada exacta:
    
    Si ocupacion == "Oficina/estudiante" y actividad == "Muy activo":
        ‚Üí Ajustar a "Activo"
    """
    nivel_original = nivel_actividad
    nivel_ajustado = nivel_actividad
    ajuste_realizado = False
    razon = ""
    
    if ocupacion in ["Oficina/estudiante", "Oficina/Escritorio"] and nivel_actividad == "Muy activo":
        nivel_ajustado = "Activo"
        ajuste_realizado = True
        razon = "Ocupaci√≥n sedentaria incompatible con 'Muy activo'"
    
    return {
        "nivel_original": nivel_original,
        "nivel_ajustado": nivel_ajustado,
        "ajuste_realizado": ajuste_realizado,
        "razon": razon,
        "ocupacion": ocupacion
    }


def validar_entrenamiento_nivel(nivel_entrenamiento: str, minutos_entrenamiento: int) -> Dict:
    """
    Implementa l√≠mites exactos:
    
    - Principiante: m√°ximo 45 minutos efectivos
    - Intermedio: m√°ximo 60 minutos
    - Avanzado: hasta 75 minutos
    """
    limites = {
        "Principiante": 45,
        "Intermedio": 60,
        "Avanzado": 75
    }
    
    limite_max = limites.get(nivel_entrenamiento, 60)
    minutos_originales = minutos_entrenamiento
    minutos_ajustados = min(minutos_entrenamiento, limite_max)
    ajuste_realizado = minutos_ajustados != minutos_originales
    
    return {
        "minutos_originales": minutos_originales,
        "minutos_ajustados": minutos_ajustados,
        "limite_max": limite_max,
        "ajuste_realizado": ajuste_realizado,
        "nivel_entrenamiento": nivel_entrenamiento
    }


def validar_pasos_actividad(pasos_diarios: str, nivel_actividad_declarado: str) -> Dict:
    """
    Implementa validaci√≥n cruzada:
    
    - < 7,500 pasos ‚Üí validar "Sedentario"
    - 7,500-9,999 ‚Üí validar "Poco activo"
    - 10,000-12,500 ‚Üí validar "Activo"
    - > 12,500 ‚Üí validar "Muy activo"
    """
    # Convertir pasos a valor num√©rico para validaci√≥n
    pasos_num = 0
    if "< 5,000" in pasos_diarios:
        pasos_num = 4000
    elif "5,000-7,500" in pasos_diarios:
        pasos_num = 6250
    elif "7,500-10,000" in pasos_diarios:
        pasos_num = 8750
    elif "10,000-12,500" in pasos_diarios:
        pasos_num = 11250
    elif "> 12,500" in pasos_diarios:
        pasos_num = 15000
    
    # Determinar nivel esperado seg√∫n pasos
    if pasos_num < 7500:
        nivel_esperado = "Sedentario"
    elif pasos_num < 10000:
        nivel_esperado = "Poco activo"
    elif pasos_num <= 12500:
        nivel_esperado = "Activo"
    else:
        nivel_esperado = "Muy activo"
    
    # Validar concordancia
    concordancia = nivel_actividad_declarado == nivel_esperado
    
    return {
        "pasos_diarios": pasos_diarios,
        "pasos_estimados": pasos_num,
        "nivel_declarado": nivel_actividad_declarado,
        "nivel_esperado": nivel_esperado,
        "concordancia": concordancia,
        "recomendacion": nivel_esperado if not concordancia else nivel_actividad_declarado
    }


# ==================== 12. CASOS DE PRUEBA OBLIGATORIOS ====================

def ejecutar_casos_prueba_obligatorios():
    """
    Implementa TODOS los casos de prueba obligatorios de la documentaci√≥n
    """
    print("=== CASOS DE PRUEBA OBLIGATORIOS ===")
    
    # Ejemplo BIA
    print("\n1. Ejemplo BIA:")
    print("Input: 16% BIA ‚Üí", ajustar_grasa_corporal(16, "BIA"))
    print("Input: 28% BIA ‚Üí", ajustar_grasa_corporal(28, "BIA"))
    
    # Ejemplo Pittsburgh
    print("\n2. Ejemplo Pittsburgh:")
    print("Q1=2, Q2=3, Q3=1, Q4=2 ‚Üí", evaluar_pittsburgh(2, 3, 1, 2))
    
    # Ejemplo Objetivo
    print("\n3. Ejemplo Objetivo:")
    print("Hombre, 23% BF, Principiante ‚Üí", determinar_objetivo_automatico(23, "Masculino", "Principiante"))
    
    # Ejemplo PSS-4
    print("\n4. Ejemplo PSS-4:")
    print("Q1=1, Q2=2, Q3=3, Q4=1 ‚Üí", evaluar_pss4(1, 2, 3, 1))
    
    # Ejemplo FRI
    print("\n5. Ejemplo FRI:")
    pittsburgh_result = evaluar_pittsburgh(2, 3, 1, 2)
    pss4_result = evaluar_pss4(1, 2, 3, 1)
    print("Score Pittsburgh=10, PSS-4=6 ‚Üí", calcular_fri(pittsburgh_result["score"], pss4_result["score"]))


if __name__ == "__main__":
    ejecutar_casos_prueba_obligatorios()